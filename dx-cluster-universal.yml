---
type: install
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-dx-universal
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.
baseUrl: https://github.com/Jahia/paas_jelastic_dx_universal/raw/PAAS-309-haproxy
globals:
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  db_user_datadog: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  mngr_pass: ${settings.toolspwd}
  su_pass: ${settings.rootpwd}
  dx_version: ${settings.dxVersion}
  package_type: dev
  operating_mode: ${settings.mode}
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  displayName: ${settings.displayName}
  # dbbaseUrl: https://raw.githubusercontent.com/Jahia/paas_jelastic_mysql_cluster/master
  dbscheme: ${settings.dbscheme}
  dbnodeType: ${settings.dbnodeType}
  dbnodes: ${settings.dbnodes}
  is_proxysql: ${settings.is_proxysql}
  xms: 256M
  xmx: 3584M
  java_opts:
    -DDB_USER=${DB_USER}
    -DDB_PASSWORD=${DB_PASSWORD}
    -DREDIS_PASSWORD=${REDIS_PASSWORD}
    -DMANAGER_USER=${MANAGER_USER}
    -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
    -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
    -DHOST_NAME=$(hostname)
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.port=7199
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -XX:MaxPermSize=512m
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+PrintConcurrentLocks
    -XX:+UseParallelGC
    -XX:SurvivorRatio=8
    -Xmn1G
    #    -Xlog:gc::time,uptime,level,pid,tid,tags
ssl: true
skipNodeEmails: true
nodes:
  - image: jahiadev/browsing:${globals.dx_version}_TEST
    displayName: Browsing
    count: ${settings.browsingCount}
    cloudlets: 40
    nodeGroup: cp
    links: sqldb:mysqldb
    startServiceOnCreation: false
    env:
      DB_USER: ${globals.db_user}
      DB_PASSWORD: ${globals.db_pass}
      MANAGER_USER: ${globals.mngr_user}
      MANAGER_PASSWORD: ${globals.mngr_pass}
      SUPER_USER_PASSWORD: ${globals.su_pass}
      REDIS_PASSWORD: ${globals.redis_pass}
      XMS: ${globals.xms}
      XMX: ${globals.xmx}
      DATADOGAPIKEY: ${globals.datadog_key}
      DX_VERSION: ${globals.dx_version}
      PACKAGE_TYPE: ${globals.package_type}
      jahia_cfg_operatingMode: ${globals.operating_mode}
      _PROVIDE: jahia
      _ROLE: Browsing
      envName: ${globals.shortdomain}
      DB_ENDPOINT: mysqldb

  - image: jahiadev/processing:${globals.dx_version}_TEST
    displayName: Processing
    count: 1
    cloudlets: 40
    nodeGroup: proc
    links:
      - sqldb:mysqldb
      # - sqldb:mysqldb
      # - nosqldb:redis
    startServiceOnCreation: false
    env:
      DB_USER: ${globals.db_user}
      DB_PASSWORD: ${globals.db_pass}
      MANAGER_USER: ${globals.mngr_user}
      MANAGER_PASSWORD: ${globals.mngr_pass}
      SUPER_USER_PASSWORD: ${globals.su_pass}
      REDIS_PASSWORD: ${globals.redis_pass}
      XMS: ${globals.xms}
      XMX: ${globals.xmx}
      DATADOGAPIKEY: ${globals.datadog_key}
      DX_VERSION: ${globals.dx_version}
      PACKAGE_TYPE: ${globals.package_type}
      jahia_cfg_operatingMode: ${globals.operating_mode}
      _PROVIDE: jahia
      _ROLE: Processing
      envName: ${globals.shortdomain}
      DB_ENDPOINT: mysqldb

  - nodeType: mariadb-dockerized
    tag: 10.4.6  # 10.2.12 # 10.3.9
    displayName: MariaDB
    count: 1
    cloudlets: 40
    nodeGroup: sqldb
    env:
      ADMINPANEL_ENABLED: false
      DATADOGAPIKEY: ${globals.datadog_key}
      DB_ENDPOINT: mysqldb
      DB_USER_DATADOG: ${globals.db_user_datadog}
      DX_VERSION: ${globals.dx_version}
      IS_PROXYSQL: ${globals.is_proxysql}
      PACKAGE_TYPE: ${globals.package_type}
      PHPMYADMIN_ENABLED: false
      _PROVIDE: Database
      _ROLE: ${globals.dbscheme}
      envName: ${globals.shortdomain}
      jahia_cfg_operatingMode: ${globals.operating_mode}

      # - nodeType: ${globals.dbnodeType}
      #   nodeGroup: sqldb
      #   count: ${globals.dbnodes}
      #   cluster:
      #     scheme: "${settings.dbscheme}"
      #     db_user: ${globals.db_user}
      #     db_pass: ${globals.db_pass}
      #   cloudlets: 40
      #   env:
      #     ON_ENV_INSTALL: ${globals.dbbaseUrl}/addons/auto-clustering/auto-cluster.jps
      #     SCHEME: ${globals.dbscheme}
      #     DB_USER: ${globals.db_user}
      #     DB_PASS: ${globals.db_pass}
      #     IS_PROXYSQL: ${globals.is_proxysql}
      #     DATADOGAPIKEY: ${globals.datadog_key}
      #     DB_USER_DATADOG: ${globals.db_user_datadog}
      #     PACKAGE_TYPE: ${globals.package_type}
      #     DX_VERSION: ${globals.dx_version}
      #     _PROVIDE: ${globals.dbscheme}
      #     _ROLE: Database
      #     envName: ${globals.shortdomain}
      #     DB_ENDPOINT: mysqldb
      #     jahia_cfg_operatingMode: ${globals.operating_mode}
      #     PHPMYADMIN_ENABLED: false
      #     ADMINPANEL_ENABLED: false


# --Events --

onUninstall:
  - cmd [${targetNodes.nodeGroup}]:
      - sed -i -e 's/.*NOPASSWD.*//g' /etc/sudoers.d/sudo
    user: root

onInstall:
  - log: "## Beginning installation of DX"
  # - if (/\/raw\/[0-9]+\.[0-9]+\.prod$/.test(baseUrl)):
  - if (/\/raw\/v[0-9]+(\.[0-9]+)+$/.test(baseUrl)):
      - log: "## git repo branch is prod"
      - api [*]: env.control.AddContainerEnvVars
        vars: {"PACKAGE_TYPE": "prod"}
  - if ( '${globals.is_proxysql}' == 'true'):
      - log: "## is_proxysql is true"
      - api[*]: env.control.AddContainerEnvVars
        vars: {"DB_ENDPOINT": "proxy"}
      - api[proxy]: env.control.AddContainerEnvVars
        vars: {"envName": "${globals.shortdomain}", "_PROVIDE": "ProxySQL", "DX_VERSION": "${globals.dx_version}", "_ROLE": "ProxySQL", "jahia_cfg_operatingMode": "${globals.operating_mode}", "DATADOGAPIKEY": "${globals.datadog_key}"}

  - setSudoer: sqldb
  - if ( '${globals.is_proxysql}' == 'true' ):
      - setSudoer: proxy

  - environment.control.ApplyNodeGroupData [proc, cp]:
      data:
        productName: jahia
        productVersion: ${globals.dx_version}
        packageType: ${globals.package_type}
  - setupSqlDB
  - if (settings.skipStart != 'true'): createJahiaDatabase
  - if (settings.mode == 'production'): createDataDogUser

  - copyApp: proc
  - if (settings.mode == 'development'):
      - installMaven: proc
  - if (settings.skipStart != 'true'):
      - api: env.control.ExecDockerRunCmd
        nodeId: ${nodes.proc.first.id}

  - sleep:
      - milliseconds: 120000

  - copyApp: cp
  - if (settings.mode == 'development'):
      - installMaven: cp
  - if (settings.skipStart != 'true'):
      - forEach(nodes.cp):
          api: env.control.ExecDockerRunCmd
          nodeId: ${@i.id}

  - setupDatadogAgent: cp
  - setupDatadogAgent: proc
  - if ( '${globals.is_proxysql}' == 'true' ):
      - setupDatadogAgentProxySql: proxy
  - setupDatadogAgentSql: sqldb

onBeforeScaleIn[cp]:
  forEach(event.response.nodes):
    - removeNodeFromHaproxy:
        nodeId: ${@i.id}
        nodeIp: ${@i.intIP}

onAfterServiceScaleOut[cp]:
  forEach(event.response.nodes):
    - copyApp: ${@i.id}
    - if (settings.mode == 'development'):
        - installMaven: ${@i.id}
    - setupDatadogAgentPerNode: ${@i.id}
    - cmd[${@i.id}]: |-
        if (service tomcat status); then
          echo "Now Restarting Tomcat"
          service tomcat restart
        else
          echo "Now Launching Tomcat"
          service tomcat start
        fi
    - addNodeToHaproxy: 
        nodeId: ${@i.id}
        nodeIp: ${@i.intIP}

# onBeforeRedeployContainer:
#   - cmd [cp,proc]:
#   - rm -rf $DATA_PATH/jahia/*

onAfterRedeployContainer[cp]:
  - copyApp: cp
  - if (settings.mode == 'development'):
      - installMaven: cp
  - cmd[cp]:
      - chkconfig --add tomcat
      - chkconfig --level 3 tomcat on
      - service tomcat start
  - setupDatadogAgent: cp

onAfterRedeployContainer[proc]:
  - copyApp: proc
  - if (settings.mode == 'development'):
      - installMaven: proc
  - cmd[proc]:
      - chkconfig --add tomcat
      - chkconfig --level 3 tomcat on
      - service tomcat start
  - setupDatadogAgent: proc

onBeforeDelete:
  - api: environment.control.DeleteEnv
    params:
      envName: "${env.shortdomain}-ha"
      password: ${event.params.password}

# -- Actions --

actions:

  # installDBnodes:
  #   - install:
  #      jps: ${globals.dbbaseUrl}/addons/auto-clustering/auto-cluster.jps
  #      shortdomain: ${settings.shortdomain}
  #      settings:
  #        shortdomain: ${settings.shortdomain}
  #        dxVersion: ${globals.dx_version}
  #        ddogApikey: ${settings.ddogApikey}
  #        nodeType: ${settings.dbnodeType}
  #        scheme: ${settings.dbscheme}
  #        nodes: ${settings.dbnodes}
  #        stack: ${settings.stack}
  #        is_proxysql: ${settings.is_proxysql}
  #        db_user: ${globals.db_user}
  #        db_pass: ${globals.db_pass}

  setSudoer:
    - log: "## Set sudoer on ${this}"
    - cmd[${this}]: |-
        USER=$(awk -F':' '$1!="jelastic" && $6=="/home/jelastic/" {print $1}' /etc/passwd)
        touch /etc/sudoers.d/sudo
        echo "$USER ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
        echo "jelastic ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
      user: root

  setupSqlDB:
    # - log: "## Do not start httpd anymore"
    # - cmd[sqldb]: |-
    #     service httpd stop
    #     rm /etc/rc.d/init.d/httpd
    - log: "## Setup MariaDB logrotate on ${this}"
    - cmd[sqldb]: |-
        service mysql stop
        wget -O /etc/my.cnf ${baseUrl}/configs/my.cnf
        wget -O /etc/logrotate.d/mysql ${baseUrl}/configs/logrotate_mysql
        logrotate -f /etc/logrotate.d/mysql
        service mysql start
      user: root
      # - if (settings.dbscheme == 'lonely'):
      #     - log: "## We just need one lonely, single, master db node, so let's handle it"
      #     - cmd[${nodes.sqldb.master.id}]: |-
      #         wget -O setupUser.sh ${baseUrl}/scripts/setupUser.sh
      #         bash setupUser.sh ${globals.db_user} ${globals.db_pass}
      #       user: root

  createJahiaDatabase:
    - log: "## Create DX's Jahia database and user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE DATABASE IF NOT EXISTS jahia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql -e "grant all privileges on jahia.* to '${globals.db_user}'@'%' identified by '${globals.db_pass}';"
        mysql -e "flush privileges;"
      user: root
    - log: "## Import DX schema in database"
    - cmd[${nodes.proc.first.id}]: cat $DATA_PATH/digital-factory-data/db/sql/schema/mysql/*.sql | mysql -h mysqldb -u$DB_USER -p$DB_PASSWORD -f jahia

  createDataDogUser:
    - log: "## Create Datadog database user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
        mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
        mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
        mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
      user: root
    - if ( settings.is_proxysql == 'true' ):
        - log: "## Create Datadog database use on proxys"
        - cmd[proxy]: |-
            mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
            mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
            mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
            mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
          user: root

  installMaven:
    - log: "## Activate Maven on ${this}"
    - cmd[${this}]: |-
        mvn_path=$(find /opt/*maven*/bin -type f -name "mvn")
        sed -i 's,#\(mvnPath =\s*\).*$,\1'$mvn_path',' /opt/tomcat/conf/digital-factory-config/jahia/jahia.properties

  copyApp:
    - log: "## Determine JDK version for good _JAVA_OPTIONS envvar"
    - cmd[${this}]: |-
        case "$(ls /usr/java/latest -l | awk '{print $NF}' | awk -F'/' '{print $NF}')" in
          jdk1.8*)
              j_opts='${globals.java_opts}'
              ;;
          *)
              j_opts='${globals.java_opts} -Xlog:gc::time,uptime,level,pid,tid,tags'
              ;;
        esac
        sed -e '2isource /.jelenv' -e "s/\(^JAVA_OPTS=.*\)\(\"$\)/\1 ${j_opts}\2/" -i /opt/tomcat/conf/tomcat-env.sh

    - log: "## Copying DX and settings is properties"
    - cmd[${this}]: |-
        [ "${this}" == "proc" ] && role="processing" || role="browsing"
        rm -rf $STACK_PATH/webapps/*
        cp -rf $DATA_PATH/jahia/tomcat/webapps/* $STACK_PATH/webapps
        chown -R tomcat:tomcat $STACK_PATH/webapps
        cd /opt/tomcat/webapps/ROOT/WEB-INF/lib/
        mngr_pwd=$(/usr/java/latest/bin/jjs -cp $(find . -name jahia-commons-*.jar):$(find . -name jasypt-*.jar) -scripting <<< "print(org.jahia.commons.encryption.EncryptionUtils.pbkdf2Digest(\$ENV.MANAGER_PASSWORD, \"p\"))" | egrep '^(p|s2):[[:graph:]]+=$')
        sed -i "s|^jahiaToolManagerPassword .*$|jahiaToolManagerPassword = $mngr_pwd|" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        sed -i "s/operatingMode/#operatingMode/" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        sed -i "s#\${HOST_NAME}#$HOSTNAME#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
        echo $SUPER_USER_PASSWORD > $DATA_PATH/digital-factory-data/root.pwd
        chown -R tomcat:tomcat $DATA_PATH/digital-factory-data/root.pwd
        sed -i "2i JMX_OPTS=\-XX:+UseParallelGC" /opt/tomcat/conf/tomcat-env.sh
        sed -i 's/\(^default.config.sync = \)cluster/\1disabled/' /data/digital-factory-data/karaf/etc/org.apache.karaf.cellar.groups.cfg
        sed -i '/<!-- Access log processes all example./i \\t<!-- Remote IP Valve -->\n \t<Valve className="org.apache.catalina.valves.RemoteIpValve" />\n' /opt/tomcat/conf/server.xml
        sed -i 's/pattern="%h /pattern="%{org.apache.catalina.AccessLog.RemoteAddr}r /' /opt/tomcat/conf/server.xml
        rm -rf /data/jahia
    - if (settings.license):
        - cmd[${this}]: |-
            echo "${settings.license}" | base64 -d > /opt/tomcat/conf/digital-factory-config/jahia/license.xml
    - if ( settings.dbscheme == 'galera'):
        - log: "## Now settings context.xml for directly use the 3 MariaDB Galera server (no proxysql)"
        - cmd[${this}]: |-
            sed 's;\(url="jdbc:mariadb:\)[^"]\+\(/jahia[^"]\+\);\1failover://mysqldb_1,mysqldb_2,mysqldb_3\2;' -i /opt/tomcat/webapps/ROOT/META-INF/context.xml

  setupDatadogAgent:
    - log: "## Finalize Datadog agent setup on ${this}"
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
            chmod 644 /opt/tomcat/logs/catalina.out
            /usr/local/bin/set_dd_tags.sh
            systemctl restart crond
            systemctl enable datadog-agent
          user: root

  setupDatadogAgentProxySql:
    - log: "## Install Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:jahia" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
            echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
            echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
            echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'role:proxysql'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   replication: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            chmod 644 /var/log/mysql/mysqld.log
            chmod 644 /var/log/mysql/slow-queries.log
            systemctl restart crond datadog-agent
          user: root

  setupDatadogAgentSql:
    - log: "## Finalize Datadog agent setup on ${this}"
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:jahia" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
            echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
            echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
            echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'role:database'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   replication: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   extra_status_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   extra_innodb_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   extra_performance_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   schema_size_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   disable_innodb_metrics: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            chmod 644 /var/log/mysql/mysqld.log
            chmod 644 /var/log/mysql/slow-queries.log
            systemctl restart crond datadog-agent
          user: root

  setupDatadogAgentPerNode:
    - log: "## Finalize Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        - cmd[${this}]: |-
            echo "hostname: cp.${this}" >> /etc/datadog-agent/datadog.yaml
            sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
            chmod 644 /opt/tomcat/logs/catalina.out
            /usr/local/bin/set_dd_tags.sh
            systemctl restart crond
            systemctl enable datadog-agent
          user: root

  addNodeToHaproxy:
    - script: |-
        var resp = jelastic.env.control.ExecCmdByGroup('${env.shortdomain}-ha', session, "bl", toJSON([
          { "command": 'echo \"server ${env.appid}-${this.nodeId} ${this.nodeIp}:80 check cookie s${this.nodeId}\" >> /etc/haproxy/haproxy.cfg.d/10-jahia.cfg && \
          sudo service haproxy reload' }
        ]), false, false);
        return resp;

  removeNodeFromHaproxy:
    - script: |-
        var resp = jelastic.env.control.ExecCmdByGroup('${env.shortdomain}-ha', session, "bl", toJSON([
          { "command": 'grep "${env.appid}-${this.nodeId}" /etc/haproxy/haproxy.cfg.d/10-jahia.cfg && \
          sed -i \"/${env.appid}-${this.nodeId}/d\" /etc/haproxy/haproxy.cfg.d/10-jahia.cfg && \
          sudo service haproxy reload' }
        ]), false, false);
        return resp;

success: /text/success.md
settings:
  fields:
    - name: dxVersion
      type: string
      caption: Jahia DX version
      required: true
    - name: rootpwd
      type: string
      caption: Jahia DX root password
      vtype: string
      required: true
    - name: toolspwd
      type: string
      caption: Jahia tools password
      vtype: string
      required: true
    - name: browsingCount
      type: string
      caption: Number of DX browsing nodes
      vtype: string
      required: true
      default: 2

    - caption: DB stack
      type: list
      name: stack
      default: mariadb-dockerized
      required: true
      values:
        - value: mysql
          caption: MySQL CE
        - value: mariadb-dockerized
          caption: MariaDB

    - caption: DB topology
      type: list
      name: dbscheme
      required: true
      dependsOn:
        stack:
          mysql:
            - value: slave
              caption: Master-Slave with extra slaves
            - value: master
              caption: Master-Master with extra slaves
            - value: single
              caption: Single Group Replication
            - value: multi
              caption: Multi Group Replication

          mariadb-dockerized:
            - value: single
              caption: One, lonely, sad and single master
            - value: slave
              caption: Master-Slave with extra slaves
            - value: master
              caption: Master-Master with extra slaves
            - value: galera
              caption: Galera Cluster

    - type: checkbox
      name: is_proxysql
      caption: Add ProxySQL for SQL Load Balancing
      value: false

    - caption: None
      inputType: hidden
      type: list
      name: dbnodeType
      dependsOn:
        stack:
          mysql:
            - value: mysql
          mariadb-dockerized:
            - value: mariadb-dockerized

    - caption: None
      inputType: hidden
      type: list
      name: dbnodes
      dependsOn:
        scheme:
          lonely:
            - value: 1
          slave:
            - value: 2
          master:
            - value: 2
          single:
            - value: 3
          multi:
            - value: 3
          galera:
            - value: 3

    - name: shortdomain
      type: envname
      caption: Environment
      required: true
    - name: displayName
      type: string
    - name: mode
      type: radio-fieldset
      caption: Operating Mode
      values:
        production: production
        development: development
      default: production
      showIf:
        production:
          - name: ddogApikey
            type: string
            caption: Datadog API KEY
            required: true
            default: NoDatadog

    - name: license
      type: text
      caption: license
