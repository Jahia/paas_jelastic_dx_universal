---
type: update
version: 1.5.2
name: Jahia - Upgrade
logo: /images/jahia-logo-70x70.png
id: jahia-upgrade
description:
  short: Jahia - Upgrade

mixins:
  - jahia/jahia_actions.yml
  - haproxy/haproxy_actions.yml
  - utils/compare-versions.yml

onInstall:
  ## Globals definition
  - cmd [proc]: |-
      ## [Upgrade] - 1/2
      exit 0
  - if ('${settings.rollingUpgrade.print()}' == ''):
      setGlobals:
        rollingUpgrade: false
  - else:
      setGlobals:
        rollingUpgrade: ${settings.rollingUpgrade}
  # By default we assume it is a (rolling) redeploy only
  - setGlobals:
      targetDockerTag: ${nodes.proc.first.version}
      upgradeJahia: false
      useExistingVolumes: true
  # If a Jahia version/docker tag was passed as parameter
  - if ('${settings.targetVersion.print()}' != ''):
      - setGlobals:
          targetDockerTag: ${settings.targetVersion}
  # If it is a new version of Jahia
  - if ('${globals.targetDockerTag}' != '${nodes.proc.first.version}'):
      - setGlobals:
          upgradeJahia: true
          useExistingVolumes: false
      - setVersionPropertiesValue
  # As a reminder, when updating the value of a global variable inside an "if" block,
  # the new value won't be taken in account if testing it inside a nested "if" block.

  ## Upgrades
  - if (!${globals.rollingUpgrade}):
      # In case of Jahia upgrade, all jahia nodes must be stopped first
      - cmd [cp, proc]:
          - service tomcat stop
        user: root
      - procUpgrade
      - bulkCpUpgrade
  - else:
      - procUpgrade
      - rollingCpUpgrade

  ## Post-actions
  # Get the Jahia version, which could be different of the name of the docker image
  # e.g.: docker image tag "7.3.3.0_PAAS-444"
  - api [${nodes.proc.first.id}]: environment.control.GetNodeInfo
  - setGlobals:
      targetJahiaVersion: ${response.node.version}
  - env.control.ApplyNodeGroupData[cp, proc]:
      data:
        productVersion: ${globals.targetJahiaVersion}
  - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"DX_VERSION": "${globals.targetJahiaVersion}"}

actions:
  procUpgrade:
    - cmd [proc]:
        - echo 'export JAHIA_UPGRADE="${globals.upgradeJahia}"' >> /etc/locale.conf
      user: root
    - api: environment.control.RedeployContainersByGroup
      nodeGroup: proc
      tag: ${globals.targetDockerTag}
      useExistingVolumes: ${globals.useExistingVolumes}
      skipReinstall: false
      envName: ${env.envName}
    # restore-module-state is not compatible with rolling upgrade
    - if (!${globals.rollingUpgrade}):
        - cmd [proc]: |-
            if [ $(echo $DX_VERSION | sed 's/\.//g') -ge 7320  ]; then
              rm -fr /data/digital-factory-data/bundles-deployed/*
              sudo -u tomcat touch "/data/digital-factory-data/[persisted-bundles].dorestore"
              echo "restore-module-state have been asked"
              ls -l /data/digital-factory-data/*.dorestore
            else
              echo "Can't use restore-module-state here"
            fi
          user: root
    - cmd [proc]: |-
        if [[ "${globals.upgradeJahia}" == "true" ]]; then
          touch /data/digital-factory-data/modules/*
          service tomcat start
        fi
        sed '/JAHIA_UPGRADE/d' -i /etc/locale.conf
      user: root

  bulkCpUpgrade:
    - cmd [proc]: |-
        ## [Upgrade] - 2/2
        exit 0
    - api: environment.control.RedeployContainersByGroup
      nodeGroup: cp
      tag: ${globals.targetDockerTag}
      useExistingVolumes: ${globals.useExistingVolumes}
      skipReinstall: false
      envName: ${env.envName}

  rollingCpUpgrade:
    - cmd [proc]: |-
        ## [Upgrade] - 2/2
        exit 0
    - forEach (nodes.cp):
        - api: environment.control.RedeployContainerById
          nodeId: ${@i.id}
          tag: ${globals.targetDockerTag}
          useExistingVolumes: ${globals.useExistingVolumes}
          skipReinstall: false
          envName: ${env.envName}

  # Add jahia version in /data/digital-factory-data/info/version.properties before redeploy
  # in case we upgrade from a version that does not handle it to a version that does.
  setVersionPropertiesValue:
    - isVersionLower:
        a : "${globals.targetDockerTag}"
        b : "7.3.7.0"
        res : isTargetVersionLowerThan7370

    - if ( ! ${globals.isTargetVersionLowerThan7370} ):
        - isVersionLower:
            a : "${globals.targetDockerTag}"
            b : "8.0.0.0"
            res : isTargetVersionLowerThan8000
        - isVersionLower:
            a : "${globals.targetDockerTag}"
            b : "8.0.2.0"
            res : isTargetVersionLowerThan8020
        - if ( ${globals.isTargetVersionLowerThan8000} || ! ${globals.isTargetVersionLowerThan8020} ):
            # If the targetDockerTag < 8.0.0.0 or >= 8.0.2.0
            cmd[proc,cp]: |-
              INFO_DIR="/data/digital-factory-data/info"
              if [ ! -f $INFO_DIR/version.properties ]; then
                mkdir -p $INFO_DIR
                echo "version=${nodes.proc.version}" > $INFO_DIR/version.properties
              fi
            user: tomcat

settings:
  fields:
    - name: targetVersion
      type: string
      caption: DX Target Version
      vtype: text
      required: false
      tooltip: Optional. If you don't specify a version, the current Jahia version of the target environment will be selected.
    - name: rollingUpgrade
      type: toggle
      caption: Rolling upgrade ?
      value: false
      required: false
      tooltip: Redeploying cp nodes one at a time. Used for redeploying with the same Jahia version to run new image.
