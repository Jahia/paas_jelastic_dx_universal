---
actions:
  installGaleraCluster:
    - resetCluster
    - initialSetup
    - setupSeeds
    - forEach(i:nodes.sqldb):
        setupInstance:
          id: "${@i.id}"
    - cmd[${nodes.sqldb.master.id}]: "/etc/init.d/mysql stop; sleep 5; galera_new_cluster;"
      user: root
    - forEach(n:nodes.sqldb):
        if (!${@n.ismaster}):
          cmd[${@n.id}]: "jem service restart"

  setupInstance:
    - cmd[${this.id}]: |-
        sed -i "s/server_id.*/server_id = $(echo '${env.region}' | md5sum | grep -Eo "[[:digit:]]{3}" | head -n1)/" /etc/mysql/conf.d/galera.cnf
        sed -i "s/bind-address.*/bind-address = node${this.id}/" /etc/mysql/conf.d/galera.cnf
        sed -i "s/report_host.*/report_host = node${this.id}/" /etc/mysql/conf.d/galera.cnf
        sed -i "s/wsrep_cluster_name.*/wsrep_cluster_name = galera-cluster/" /etc/mysql/conf.d/galera.cnf
        sed -i "s/wsrep_node_name.*/wsrep_node_name = node${this.id}/" /etc/mysql/conf.d/galera.cnf
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during galera cluster setup."

  initialSetup:
    - setNodeDisplayName[sqldb]: Galera
    - cmd[sqldb]: |-
        wget -q ${baseUrl}/configs/mysql-init.d -O /etc/init.d/mysql
        wget -q ${baseUrl}/configs/galera.cnf -O /etc/mysql/conf.d/galera.cnf &>> /var/log/run.log
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during galera cluster setup."

  stopGalera:
    forEach(nodes.sqldb):
      - log: "Stopping MariaDB on node ${@i.id}..."
      - cmd[${@i.id}]: |-
          service mysql stop || exit 1
          cat /var/lib/mysql/grastate.dat || true
        user: root

  setupSeeds:
    script: |
      var resp = jelastic.env.control.GetEnvInfo('${env.envName}', session);
      if (resp.result != 0) return resp;
      var intIP = [];
      for (var i = 0, n = resp.nodes; i < n.length; i++)
        n[i].nodeGroup == "sqldb" ? intIP.push(n[i].intIP) : 0
      resp = {result:0, onAfterReturn: {}};
      resp.onAfterReturn['cmd[sqldb]'] = 'sed -i "s|wsrep_cluster_address.*|wsrep_cluster_address = gcomm://'+ intIP.join(',') +'|g " /etc/mysql/conf.d/galera.cnf';
      resp.onAfterReturn['user'] = 'root';
      return resp;

  resetCluster:
    - cmd[sqldb]: |-
        [ -f /etc/mysql/conf.d/galera.cnf ] && rm -f /etc/mysql/conf.d/galera.cnf
        [ -f /var/lib/mysql/grastate.dat ] && rm -f /var/lib/mysql/grastate.dat
        [ -f /var/lib/mysql/gvwstate.dat ] && rm -f /var/lib/mysql/gvwstate.dat
        [ -f /var/lib/mysql/galera.cache ] && rm -f /var/lib/mysql/galera.cache
        /etc/init.d/mysql stop; pkill -9 mysql; /etc/init.d/mysql start
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during galera cluster init."

  checkGaleraClusterHealth:
    - cmd [${this}]: |-
        if [ -f /var/lib/mysql/grastate.dat ]; then
          if [ "$(mysql -Ns -e "show global status like 'wsrep_local_state_comment'" | awk '{print $NF}')" != "Synced"  ]; then
            echo "[ERROR] Galera cluster not synced, exiting" 1>&2 && exit 1
          fi
        fi
      user: root

  stopGaleraNode:
    cmd[${this}]: |-
      service mysql stop || exit 1
      if [ -f /var/lib/mysql/grastate.dat ]; then
        cat /var/lib/mysql/grastate.dat
      else
        echo "$HOSTNAME is not in a cluster"
      fi
      service mysql stop
    user: root

  startGaleraNode:
    cmd[${this}]: |-
      service mysql start
      rc=$?
      if [ ! -f /var/lib/mysql/grastate.dat ]; then
        echo "$HOSTNAME is not in a cluster, exiting"
        exit $rc
      fi
      i=1
      it=66
      until [ "$(mysql -Ns -e "show global status like 'wsrep_local_state_comment'" | awk '{print $NF}')" == "Synced"  ]; do
        echo "$(date) not ready yet (iteration $i/$it)"
        if [ $i -ge $it ]; then
          echo "Too long to start, something is wrong here... EXITING"
          exit 1
        fi
        sleep 1
        ((i++))
      done
      echo "Node $HOSTNAME is now Synced !"
    user: root

  checkGaleraClusterSize:
    # Ensure the cluster size match the node count
    - cmd[${nodes.sqldb.first.id}]: |-
        mysql -Nse "show global status like 'wsrep_cluster_size';" | awk '{print $NF}'
    - if ("${response.out}" == "${nodes.sqldb.length}"):
        setGlobals:
          galeraClusterSizeOk: True
    - else:
        setGlobals:
          galeraClusterSizeOk: False

  installMariaDBBackup:
    - cmd[${this}]: |-
        if [[ ! -x /usr/bin/mariabackup ]]; then
          yum install -y MariaDB-backup qpress
        fi
      user: root
