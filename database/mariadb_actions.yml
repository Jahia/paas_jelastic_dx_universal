---
actions:
  installDatabase:
    - setSudoer: sqldb
    - installMariaDBBackup: sqldb
    - log: "## Setup MariaDB logrotate on ${this}"
    - cmd[sqldb]: |-
        mkdir /etc/systemd/system/{mysql,mariadb}.service.d
        echo -e "[Service]\nLimitNOFILE=524290" | tee /etc/systemd/system/{mysql,mariadb}.service.d/override.conf
        # Securing possible blocking issues with jelastic/mariadb:10.4.13 with next 3 lines
        sudo -u mysql mysql -e "alter user root@localhost identified via unix_socket;"
        [ -f /etc/mysql/conf.d/master.cnf ] && rm -f /etc/mysql/conf.d/master.cnf
        [ -f /etc/mysql/conf.d/slave.cnf ] && rm -f /etc/mysql/conf.d/slave.cnf
        printf "[mysqld]\nkey_buffer_size = 128M\nmyisam_sort_buffer_size = 128M" > /etc/mysql/conf.d/mysql.cnf
        mysql -e "set global key_buffer_size = 128*1024*1024; set global myisam_sort_buffer_size = 128*1024*1024;"
        wget -qO /etc/logrotate.d/mysql ${baseUrl}/configs/logrotate_mysql
        logrotate -f /etc/logrotate.d/mysql
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during mariadb setup."

    - if (nodes.sqldb.length > 1):
        - installGaleraCluster
    - if (settings.skipStart != 'true'):
        - createJahiaDatabase

  createJahiaDatabase:
    - log: "## Create DX's Jahia database and user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE DATABASE IF NOT EXISTS jahia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql -e "grant all privileges on jahia.* to '${globals.db_user}'@'%' identified by '${globals.db_pass}';"
        mysql -e "flush privileges;"
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred when creating jahia database."

  createDataDogUser:
    - log: "## Create Datadog database user"
    - cmd[${nodes.sqldb.master.id}]: |-
        exists=$(mysql -sNe "select count(*) from  mysql.user where User='datadog' and Host='localhost';")
        if [ $exists -lt 1 ]; then
          mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
          mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
          mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
          mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
        fi
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred when creating datadog database."

  setupDatadogAgentSql:
    - createDataDogUser
    - log: "## Finalize Datadog agent setup on ${this}"
    - cmd [${this}]: |-
        DD_API_KEY=$(sed -n 's/DATADOGAPIKEY=\(.*\)/\1/p' < /.jelenv) bash -c "$(curl -sL https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
        echo "tags:" >> /etc/datadog-agent/datadog.yaml
        echo " - product:jahia" >> /etc/datadog-agent/datadog.yaml
        echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
        echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
        echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
        echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
        echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
        echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    log_processing_rules:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "      - type: multi_line " >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "        name: new_log_start_with_date" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "        pattern: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "      - 'env:${env.envName}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "      - 'role:database'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       replication: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       extra_status_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       extra_innodb_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       extra_performance_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       schema_size_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "       disable_innodb_metrics: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
        chown mysql:root /var/log/jelastic-packages
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        wget -qO /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${baseUrl}/configs/dd_agent_jelastic_package_conf.yml
        wget -qO /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
        wget -qO /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
        chmod u+x /usr/local/bin/set_dd_tags.sh
        chmod 644 /var/log/mysql/mysqld.log
        chmod 644 /var/log/mysql/slow-queries.log  > /dev/null 2>&1
        systemctl restart crond datadog-agent
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred when installing datadog agent on a mariadb node."

  checkMariadbHealth:
    - cmd [${this}]: |-
        if ! service mysql status > /dev/null; then
          echo "[ERROR] Mariadb service is not running, exiting" 1>&2 && exit 1
        fi
        if ! mysqladmin -s processlist 1>/dev/null; then
          echo "[ERROR] Can't connect to mysql instance, exiting" 1>&2 && exit 1
        fi
      user: root

  getGaleraNodeNameIndex:
    - cmd [${this}]: |-
        my_ip=$(grep $(hostname) /etc/hosts | awk '{print $1}')
        awk -v my_ip="$my_ip galera" '$0 ~my_ip {print $2}' /etc/hosts
    - setGlobals:
        galeraNodeNameIndex: "${response.out}"

  mysqlService:
    - if ("${this.action}" == "enable"):
        - cmd [${this.target}]: |-
            sed -i '/^\/var\/lib\/jelastic\/overrides\/envinfo.lib/d' /etc/jelastic/redeploy.conf
            rm /var/lib/jelastic/overrides/envinfo.lib || exit 0
          user: root
    - if ("${this.action}" == "disable"):
        - cmd [${this.target}]: |-
            echo "SERVICE=''" > /var/lib/jelastic/overrides/envinfo.lib
            echo "/var/lib/jelastic/overrides/envinfo.lib" >> /etc/jelastic/redeploy.conf
