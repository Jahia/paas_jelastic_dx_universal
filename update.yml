---
type: update
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-dx-universal
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.
globals:
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  db_user_datadog: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  mngr_pass: ${settings.toolspwd}
  su_pass: ${settings.rootpwd}
  dx_version: ${settings.dxVersion}
  package_type: dev
  operating_mode: ${settings.mode}
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  displayName: ${settings.displayName}
  dbbaseUrl: https://raw.githubusercontent.com/Jahia/paas_jelastic_mysql_cluster/master
  dbscheme: ${settings.dbscheme}
  dbnodeType: ${settings.dbnodeType}
  dbnodes: ${settings.dbnodes}
  is_proxysql: ${settings.is_proxysql}
  xms: 256M
  xmx: 3584M
  java_opts:
    -DDB_USER=${DB_USER}
    -DDB_PASSWORD=${DB_PASSWORD}
    -DREDIS_PASSWORD=${REDIS_PASSWORD}
    -DMANAGER_USER=${MANAGER_USER}
    -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
    -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
    -DHOST_NAME=$(hostname)
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.port=7199
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -XX:MaxPermSize=512m
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+PrintConcurrentLocks
    -XX:+UseParallelGC
    -XX:SurvivorRatio=8
    -Xmn1G
    -Xlog:gc::time,uptime,level,pid,tid,tags
ssl: true
skipNodeEmails: true

onAfterClone:
  - log: "## Reenable tomcat autostart after cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat on
    user: root
  - log: Start post-clone setup
  - api [*]: env.control.AddContainerEnvVars
    vars: {"envName": "${env.shortdomain}"}
  - environment.control.ApplyNodeGroupData [proc, cp]:
      data:
        envLink: ""
  - cmd[*]: |-
      rm -f /etc/ssh/ssh_host*
      service sshd restart
    user: root
  - api: jelastic.env.control.SetEnvDisplayName
    displayname: "${env.shortdomain}"
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/update.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}

onAfterServiceScaleOut[cp]:
  forEach(event.response.nodes):
    - copyApp: ${@i.id}
    - if (settings.mode == 'development'):
        - installMaven: ${@i.id}
    - setupDatadogAgentPerNode: ${@i.id}
    - forEach(event.response.nodes):
        - cmd[${@i.id}]: |-
            if (service tomcat status); then
              echo "Now Restarting Tomcat"
              service tomcat restart
            else
              echo "Now Launching Tomcat"
              service tomcat start
            fi
          user: root

onBeforeRedeployContainer:
  - cmd [cp,proc]:
      - rm -rf $DATA_PATH/jahia/*

onAfterRedeployContainer[cp]:
  - copyApp: cp
  - if (settings.mode == 'development'):
      - installMaven: cp
  - cmd[cp]:
      - chkconfig --add tomcat
      - chkconfig --level 3 tomcat on
      - service tomcat start
  - setupDatadogAgent: cp

onAfterRedeployContainer[proc]:
  - copyApp: proc
  - if (settings.mode == 'development'):
      - installMaven: proc
  - cmd[proc]:
      - chkconfig --add tomcat
      - chkconfig --level 3 tomcat on
      - service tomcat start
  - setupDatadogAgent: proc

# -- Actions --

actions:
  setSudoer:
    - log: "## Set sudoer on ${this}"
    - cmd[${this}]: |-
        USER=$(awk -F':' '$1!="jelastic" && $6=="/home/jelastic/" {print $1}' /etc/passwd)
        touch /etc/sudoers.d/sudo
        echo "$USER ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
        echo "jelastic ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
      user: root
  setupSqlDB:
    # - log: "## Do not start httpd anymore"
    # - cmd[sqldb]: |-
    #     service httpd stop
    #     rm /etc/rc.d/init.d/httpd
    - log: "## Setup MariaDB logrotate on ${this}"
    - cmd[sqldb]: |-
        service mysql stop
        wget -O /etc/my.cnf ${baseUrl}/configs/my.cnf
        wget -O /etc/logrotate.d/mysql ${baseUrl}/configs/logrotate_mysql
        logrotate -f /etc/logrotate.d/mysql
        service mysql start
      user: root
      # - if (settings.dbscheme == 'lonely'):
      #     - log: "## We just need one lonely, single, master db node, so let's handle it"
      #     - cmd[${nodes.sqldb.master.id}]: |-
      #         wget -O setupUser.sh ${baseUrl}/scripts/setupUser.sh
      #         bash setupUser.sh ${globals.db_user} ${globals.db_pass}
      #       user: root
  createJahiaDatabase:
    - log: "## Create DX's Jahia database and user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE DATABASE IF NOT EXISTS jahia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql -e "grant all privileges on jahia.* to '${globals.db_user}'@'%' identified by '${globals.db_pass}';"
        mysql -e "flush privileges;"
      user: root
    - log: "## Import DX schema in database"
    - cmd[${nodes.proc.first.id}]: cat $DATA_PATH/digital-factory-data/db/sql/schema/mysql/*.sql | mysql -h mysqldb -u$DB_USER -p$DB_PASSWORD -f jahia

  createDataDogUser:
    - log: "## Create Datadog database user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
        mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
        mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
        mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
      user: root
    - if ( settings.is_proxysql == 'true' ):
        - log: "## Create Datadog database use on proxys"
        - cmd[proxy]: |-
            mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
            mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
            mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
            mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
          user: root
  installMaven:
    - log: "## Install Maven on ${this}"
    - cmd[${this}]: |-
        wget -O maven.zip http://apache.mirrors.ovh.net/ftp.apache.org/dist/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.zip
        unzip maven.zip -d /opt
        sed -i 's/#mvnPath = mvn/mvnPath = \/opt\/apache-maven-3.6.0\/bin\/mvn/' /opt/tomcat/conf/digital-factory-config/jahia/jahia.properties
        chown tomcat:tomcat -R /opt/apache-maven*
        sed -i "2i MAVEN_OPTS=\-XX:+UseParallelGC" /opt/apache-maven*/bin/mvn
        sed -i "2i _JAVA_OPTIONS=" /opt/apache-maven*/bin/mvn
  copyApp:
    - log: "## Copying DX and settings is properties"
    - cmd[${this}]: |-
        [ "${this}" == "proc" ] && role="processing" || role="browsing"
        rm -rf $STACK_PATH/webapps/*
        cp -rf $DATA_PATH/jahia/tomcat/webapps/* $STACK_PATH/webapps
        chown -R tomcat:tomcat $STACK_PATH/webapps
        cd /opt/tomcat/webapps/ROOT/WEB-INF/lib/
        mngr_pwd=$(/usr/java/latest/bin/jjs -cp $(find . -name jahia-commons-*.jar):$(find . -name jasypt-*.jar) -scripting <<< "print(org.jahia.commons.encryption.EncryptionUtils.pbkdf2Digest(\$ENV.MANAGER_PASSWORD, \"p\"))" | egrep '^(p|s2):[[:graph:]]+=$')
        sed -i "s|^jahiaToolManagerPassword .*$|jahiaToolManagerPassword = $mngr_pwd|" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        sed -i "s/operatingMode/#operatingMode/" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        sed -i "s#\${HOST_NAME}#$HOSTNAME#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
        sed -i "2i JMX_OPTS=\-XX:+UseParallelGC" /opt/tomcat/conf/tomcat-env.sh
        sed -i 's/\(^default.config.sync = \)cluster/\1disabled/' /data/digital-factory-data/karaf/etc/org.apache.karaf.cellar.groups.cfg
        rm -rf /data/jahia
    - if (settings.license):
        - cmd[${this}]: |-
            echo "${settings.license}" | base64 -d > /opt/tomcat/conf/digital-factory-config/jahia/license.xml
    - if ( settings.dbscheme == 'galera'):
        - log: "## Now settings context.xml for directly use the 3 MariaDB Galera server (no proxysql)"
        - cmd[${this}]: |-
            sed 's;\(url="jdbc:mariadb:\)[^"]\+\(/jahia[^"]\+\);\1failover://mysqldb_1,mysqldb_2,mysqldb_3\2;' -i /opt/tomcat/webapps/ROOT/META-INF/context.xml
  setupDatadogAgent:
    - log: "## Install Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:dx" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
            echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
            echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
            wget -O /etc/datadog-agent/conf.d/tomcat.d/conf.yaml ${baseUrl}/configs/dd_agent_tomcat_conf.yaml
            sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            chmod 755 /opt/tomcat/logs/catalina.out -R
            /usr/local/bin/set_dd_tags.sh
            usermod -G tomcat dd-agent
            systemctl restart crond datadog-agent
          user: root

  setupDatadogAgentProxySql:
    - log: "## Install Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:dx" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
            echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
            echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
            echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'role:proxysql'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   replication: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            chmod 644 /var/log/mysql/mysqld.log
            chmod 644 /var/log/mysql/slow-queries.log
            systemctl restart crond datadog-agent
          user: root

  setupDatadogAgentSql:
    - log: "## Install Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        forEach(nodes.${this}):
          cmd[${@i.id}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: ${this}.${@i.id}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:dx" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
            echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
            echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
            echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "      - 'role:database'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   replication: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   extra_status_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   extra_innodb_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   extra_performance_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   schema_size_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            echo "   disable_innodb_metrics: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            chmod 644 /var/log/mysql/mysqld.log
            chmod 644 /var/log/mysql/slow-queries.log
            systemctl restart crond datadog-agent
          user: root

  setupDatadogAgentPerNode:
    - log: "## Install Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        - cmd[${this}]: |-
            DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
            echo "hostname: cp.${this}" >> /etc/datadog-agent/datadog.yaml
            sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
            echo "tags:" >> /etc/datadog-agent/datadog.yaml
            echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
            echo " - product:dx" >> /etc/datadog-agent/datadog.yaml
            echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
            echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
            echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
            echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
            echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
            wget -O /etc/datadog-agent/conf.d/tomcat.d/conf.yaml ${baseUrl}/configs/dd_agent_tomcat_conf.yaml
            sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
            chmod 755 /opt/tomcat/logs/catalina.out -R
            wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
            wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
            chmod u+x /usr/local/bin/set_dd_tags.sh
            usermod -G tomcat dd-agent
            systemctl restart crond datadog-agent
          user: root
