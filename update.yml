---
type: update
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-jelastic
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.
baseUrl: https://github.com/Jahia/paas_jelastic_dx_universal/raw/PAAS-599

ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - haproxy/haproxy_actions.yml
  - jahia/jahia_actions.yml


# --Events --


onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeNodeFromHaproxy:
          nodeId: ${@i.id}
          nodeIp: ${@i.intIP}

onAfterServiceScaleOut[cp]:
  - forEach(event.response.nodes):
      - onAfterBrowsingScaleOut:
          newNode: ${@i.id}
  - resetHaproxyBackends

onAfterRedeployContainer[cp]:
  - onAfterRedeployJahiaContainer: cp

onAfterRedeployContainer[proc]:
  - onAfterRedeployJahiaContainer: proc


onBeforeClone:
  - log: "## Disable tomcat autostart before cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat off
    user: root

onAfterClone:
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/utils/onAfterClone.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/update.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}

# -- Actions --

actions:
  setupSqlDB:
    - log: "## Setup MariaDB logrotate on ${this}"
    - cmd[sqldb]: |-
        wget -O /etc/logrotate.d/mysql ${baseUrl}/configs/logrotate_mysql
        logrotate -f /etc/logrotate.d/mysql
      user: root

  createJahiaDatabase:
    - log: "## Create DX's Jahia database and user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE DATABASE IF NOT EXISTS jahia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql -e "grant all privileges on jahia.* to '${globals.db_user}'@'%' identified by '${globals.db_pass}';"
        mysql -e "flush privileges;"
      user: root

  createDataDogUser:
    - log: "## Create Datadog database user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
        mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
        mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
        mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
      user: root

  setupDatadogAgentSql:
    - log: "## Finalize Datadog agent setup on ${this}"
    - if (settings.mode == 'production'):
        cmd [${this}]: |-
          DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
          NODE_NAME=${HOSTNAME/-*}
          echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
          sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
          echo "tags:" >> /etc/datadog-agent/datadog.yaml
          echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
          echo " - product:jahia" >> /etc/datadog-agent/datadog.yaml
          echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
          echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
          echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
          echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
          echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
          echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "      - 'role:database'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   replication: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   extra_status_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   extra_innodb_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   extra_performance_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   schema_size_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          echo "   disable_innodb_metrics: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
          wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
          wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
          chmod u+x /usr/local/bin/set_dd_tags.sh
          chmod 644 /var/log/mysql/mysqld.log
          chmod 644 /var/log/mysql/slow-queries.log
          systemctl restart crond datadog-agent
        user: root

  setupDatadogAgentPerNode:
    - log: "## Finalize Datadog agent on ${this}"
    - if (settings.mode == 'production'):
        - cmd[${this}]: |-
            NODE_NAME=${HOSTNAME/-*}
            echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
            sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
            chmod 644 /opt/tomcat/logs/catalina.out
            /usr/local/bin/set_dd_tags.sh
            systemctl restart crond
            systemctl enable datadog-agent
          user: root

