---
type: update
version: 1.5.2
name: Jahia - Update events
logo: /images/jahia-logo-70x70.png
id: jahia-jelastic
description:
  short: Jahia - Update events

ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - haproxy/haproxy_actions.yml
  - jahia/jahia_actions.yml
  - database/mariadb_actions.yml
  - database/galera_actions.yml

globals:
  haproxy_admin_stats_pass: ${fn.password(20)}
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  db_user_datadog: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  dx_version: ${settings.dxVersion}
  package_type: dev
  operating_mode: ${settings.mode}
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  displayName: ${settings.displayName}
  jahia_docker_image: ${settings.jahiaDockerImage}
  dbbaseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master
  dbnodeType: mariadb-dockerized
  xms: 256M
  xmx: 3584M
  expandImportedFilesOnDisk: "true"
  jahiaFileUploadMaxSize: 268435456
  imageService: ImageMagickImageService
  org_jahia_ehcachemanager_maxBytesLocalHeap_dev: 700M
  org_jahia_ehcachemanager_big_maxBytesLocalHeap_dev: 700M
  org_jahia_ehcachemanager_maxBytesLocalHeap_prod: 800M
  org_jahia_ehcachemanager_big_maxBytesLocalHeap_prod_cp: 2500M
  org_jahia_ehcachemanager_big_maxBytesLocalHeap_prod_proc: 700M
  java_opts:
    -DDB_USER=${DB_USER}
    -DDB_PASSWORD=${DB_PASSWORD}
    -DREDIS_PASSWORD=${REDIS_PASSWORD}
    -DMANAGER_USER=${MANAGER_USER}
    -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
    -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
    -DHOST_NAME=$(hostname)
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.port=7199
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -XX:MaxPermSize=512m
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+PrintConcurrentLocks
    -XX:+UseParallelGC
    -XX:SurvivorRatio=8
    -Xmn1G

# --Events --
onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeNodeFromHaproxy:
          nodeId: ${@i.id}
          nodeIp: ${@i.intIP}

onAfterServiceScaleOut[cp]:
  - forEach(event.response.nodes):
      - onAfterBrowsingScaleOut:
          newNode: ${@i.id}
  - resetHaproxyBackends

onBeforeRestartContainer[cp]:
  removeNodeFromHaproxy:
    nodeId: ${event.params.nodeId}

onAfterRestartContainer[cp]:
  forEach(nodes.cp):
    if ("${event.params.nodeId}" == ${@i.id}):
      addNodeToHaproxy:
        nodeId: ${@i.id}
        nodeIp: ${@i.intIP}

# There is no proper way to merge these events as Cloudscripting
# does not allow to put several nodeGroups as target of an event
onBeforeRedeployContainer[cp]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - forEach(nodes.cp):
          removeNodeFromHaproxy:
            nodeId: ${@i.id}
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeGroup}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - removeNodeFromHaproxy:
          nodeId: ${event.params.nodeId}
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeId}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeId}

onAfterRedeployContainer[cp]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeGroup}
      - resetHaproxyBackends
  - elif ('${event.params.nodeId.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeId}
      - forEach(nodes.cp):
          if ("${event.params.nodeId}" == "${@i.id}"):
            addNodeToHaproxy:
              nodeId: ${@i.id}
              nodeIp: ${@i.intIP}

onBeforeRedeployContainer[proc]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeGroup}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeId}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeId}

onAfterRedeployContainer[proc]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeId}

onAfterRedeployContainer[bl]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - setSudoer: ${event.params.nodeGroup}
      - splitHaproxyConf: ${event.params.nodeGroup}
      - setupDatadogAgentHaproxy: ${event.params.nodeGroup}
      - environment.control.ApplyNodeGroupData [bl]:
          data:
            productName: haproxy
            productVersion: ${nodes.bl.first.version}
  - elif ('${event.params.nodeId.print()}' != ''):
      - setSudoer: ${event.params.nodeId}
      - splitHaproxyConf: ${event.params.nodeId}
      - setupDatadogAgentHaproxy: ${event.params.nodeId}
      - environment.control.ApplyNodeGroupData [bl]:
          data:
            productName: haproxy
            productVersion: ${nodes.bl.first.version}

onAfterRedeployContainer[sqldb]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - setSudoer: ${event.params.nodeGroup}
      - setupDatadogAgentSql: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - setSudoer: ${event.params.nodeId}
      - setupDatadogAgentSql: ${event.params.nodeId}

onBeforeStop:
  - stopJahia: cp, proc
  - stopGalera

onBeforeClone:
  - log: "## Disable tomcat autostart before cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat off
    user: root

onAfterClone:
  - log: "## Reenable tomcat autostart after cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat on
    user: root
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/onAfterClone.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/update.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}

onBeforeDelete:
  deleteEnvLink

# -- Actions --
actions:
  deleteEnvLink:
    - script: |-
        const envName = "${env.envName}";
        jCustomerEnv = jelastic.env.control.GetNodeGroups(envName, session).object.filter(function (object) {
                                return object.name == "cp";
                              }).pop().envLink;
        if (jCustomerEnv == null) {
          return {"result": 0, "out": "No jCustomer env linked"};
        }
        envsLinked = jelastic.env.control.GetNodeGroups(jCustomerEnv, session).object.filter(function (object) {
                                return object.name == "cp";
                              }).pop().envLink;
        if (envsLinked.indexOf(envName) == -1) {
          return {"result": 0, "out": envName + " not in envLink of " + jCustomerEnv};
        }

        // envLink can contain multiple Jahia envs on jCustomer side separated by a comma
        if (envsLinked.indexOf(",") != -1) {
          envsLinkedArr = envsLinked.split(",");
          envsLinkedArr.splice(envsLinkedArr.indexOf(envName), 1);
          newEnvLink = String(envsLinkedArr);
        } else {
          newEnvLink = null;
        }
        resp = jelastic.env.control.ApplyNodeGroupData(jCustomerEnv, session, nodeGroup='cp', data={'envLink': newEnvLink});
        return {"result": 0, "out": envName + " removed from envLink of " + jCustomerEnv};
