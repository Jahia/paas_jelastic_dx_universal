---
type: update
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-jelastic
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.
baseUrl: https://github.com/Jahia/paas_jelastic_dx_universal/raw/PAAS-665

ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - haproxy/haproxy_actions.yml
  - jahia/jahia_actions.yml
  - database/mariadb_actions.yml
  - database/galera_actions.yml

globals:
  haproxy_admin_stats_pass: ${fn.password(20)}
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  db_user_datadog: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  dx_version: ${settings.dxVersion}
  package_type: dev
  operating_mode: ${settings.mode}
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  displayName: ${settings.displayName}
  jahia_docker_image: ${settings.jahiaDockerImage}
  dbbaseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master
  dbnodeType: mariadb-dockerized
  xms: 256M
  xmx: 3584M
  java_opts:
    -DDB_USER=${DB_USER}
    -DDB_PASSWORD=${DB_PASSWORD}
    -DREDIS_PASSWORD=${REDIS_PASSWORD}
    -DMANAGER_USER=${MANAGER_USER}
    -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
    -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
    -DHOST_NAME=$(hostname)
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.port=7199
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -XX:MaxPermSize=512m
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+PrintConcurrentLocks
    -XX:+UseParallelGC
    -XX:SurvivorRatio=8
    -Xmn1G


# --Events --
onBeforeChangeTopology:
  - log: "## grab values in order to set good globals"
  - script: |
     function log(message){
       return jelastic.marketplace.console.WriteLog(appid, session, message);
     }
     var envvars_list = [
                          "MANAGER_PASSWORD",
                        ]
     var resp = jelastic.env.control.GetContainerEnvVars("${env.envName}",
                                                         session,
                                                         ${nodes.proc.master.id})

     if (resp.result != 0) return {"result":1, "no_processing":"true"};

     var values = {}

     for(var i = 0, sizei = envvars_list.length; i < sizei ; i++){
       var size_norm = sizei - 1
       var envvar = envvars_list[i]
       log(i + "/" + size_norm + " " + envvar)

       if(envvar in resp.object){
         log(envvar + " exist on processing, is value is: " + resp.object[envvar])
         values[envvar] = resp.object[envvar]
         }
       else {
         log(envvar + " doesn't exist on processing")
         values[envvar] = ""
       }
     }
     return {"result":0, "no_processing": "true", "values": values}
  - setGlobals:
      mngr_pass: ${response.values.MANAGER_PASSWORD}
  - log: "## here is the new globals values:"
  - log: "globals.mngr_pass: ${globals.mngr_pass}"

onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeNodeFromHaproxy:
          nodeId: ${@i.id}
          nodeIp: ${@i.intIP}

onAfterServiceScaleOut[cp]:
  - forEach(event.response.nodes):
      - onAfterBrowsingScaleOut:
          newNode: ${@i.id}
  - resetHaproxyBackends

onAfterRedeployContainer[cp]:
  - onAfterRedeployJahiaContainer: cp

onAfterRedeployContainer[proc]:
  - onAfterRedeployJahiaContainer: proc

onBeforeStop:
  - stopJahia: cp, proc

onBeforeClone:
  - log: "## Disable tomcat autostart before cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat off
    user: root

onAfterClone:
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/onAfterClone.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/update.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
