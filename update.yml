---
type: update
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-jelastic
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.

ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - haproxy/haproxy_actions.yml
  - jahia/jahia_actions.yml
  - database/mariadb_actions.yml
  - database/galera_actions.yml

globals:
  haproxy_admin_stats_pass: ${fn.password(20)}
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  db_user_datadog: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  dx_version: ${settings.dxVersion}
  package_type: dev
  operating_mode: ${settings.mode}
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  displayName: ${settings.displayName}
  jahia_docker_image: ${settings.jahiaDockerImage}
  dbbaseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master
  dbnodeType: mariadb-dockerized
  xms: 256M
  xmx: 3584M
  java_opts:
    -DDB_USER=${DB_USER}
    -DDB_PASSWORD=${DB_PASSWORD}
    -DREDIS_PASSWORD=${REDIS_PASSWORD}
    -DMANAGER_USER=${MANAGER_USER}
    -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
    -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
    -DHOST_NAME=$(hostname)
    -Dcom.sun.management.jmxremote
    -Dcom.sun.management.jmxremote.port=7199
    -Dcom.sun.management.jmxremote.ssl=false
    -Dcom.sun.management.jmxremote.authenticate=false
    -XX:MaxPermSize=512m
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+PrintConcurrentLocks
    -XX:+UseParallelGC
    -XX:SurvivorRatio=8
    -Xmn1G

# --Events --
onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeNodeFromHaproxy:
          nodeId: ${@i.id}
          nodeIp: ${@i.intIP}

onAfterServiceScaleOut[cp]:
  - forEach(event.response.nodes):
      - onAfterBrowsingScaleOut:
          newNode: ${@i.id}
  - resetHaproxyBackends

onBeforeRestartContainer[cp]:
  removeNodeFromHaproxy:
    nodeId: ${event.params.nodeId}

onAfterRestartContainer[cp]:
  forEach(nodes.cp):
    if ("${event.params.nodeId}" == ${@i.id}):
      addNodeToHaproxy:
        nodeId: ${@i.id}
        nodeIp: ${@i.intIP}

# There is no proper way to merge these events as Cloudscripting
# does not allow to put several nodeGroups as target of an event
onBeforeRedeployContainer[cp]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - forEach(nodes.cp):
          removeNodeFromHaproxy:
            nodeId: ${@i.id}
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeGroup}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - removeNodeFromHaproxy:
          nodeId: ${event.params.nodeId}
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeId}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeId}

onAfterRedeployContainer[cp]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeGroup}
      - resetHaproxyBackends
  - elif ('${event.params.nodeId.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeId}
      - forEach(nodes.cp):
          if ("${event.params.nodeId}" == "${@i.id}"):
            addNodeToHaproxy:
              nodeId: ${@i.id}
              nodeIp: ${@i.intIP}

onBeforeRedeployContainer[proc]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeGroup}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - keepTomcatEnvConfOnRedeploy: ${event.params.nodeId}
      - keepJCRIndicesOnRedeploy: ${event.params.nodeId}

onAfterRedeployContainer[proc]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - onAfterRedeployJahiaContainer: ${event.params.nodeId}

onAfterRedeployContainer[bl]:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - splitHaproxyConf: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId.print()}' != ''):
      - splitHaproxyConf: ${event.params.nodeId}

onBeforeStop:
  - stopJahia: cp, proc
  - stopGalera

onBeforeClone:
  - log: "## Disable tomcat autostart before cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat off
    user: root

onAfterClone:
  - log: "## Reenable tomcat autostart after cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat on
    user: root
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/onAfterClone.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/update.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
