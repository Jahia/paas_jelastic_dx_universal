---
type: install
version: 1.5.2
name: Jahia - Digital Experience Manager
logo: /images/jahia-logo-70x70.png
id: jahia-jelastic
description:
  short: Jahia - Digital Experience Manager
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.
baseUrl: https://github.com/Jahia/paas_jelastic_dx_universal/raw/PAAS-599
globals:
  haproxy_admin_stats_pass: ${fn.password(20)}
  db_user: jahia-db-${fn.random}
  db_pass: ${fn.password(20)}
  db_user_datadog: ${fn.password(20)}
  redis_pass: ${fn.password(20)}
  mngr_user: manager
  mngr_pass: ${settings.toolspwd}
  su_pass: ${settings.rootpwd}
  dx_version: ${settings.dxVersion}
  package_type: dev
  operating_mode: ${settings.mode}
  datadog_key: ${settings.ddogApikey}
  shortdomain: ${settings.shortdomain}
  displayName: ${settings.displayName}
  jahia_docker_image: ${settings.jahiaDockerImage}
  dbbaseUrl: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master
  dbnodeType: mariadb-dockerized
  # xms: 256M
  # xmx: 3584M
  # java_opts:
  #   -DDB_USER=${DB_USER}
  #   -DDB_PASSWORD=${DB_PASSWORD}
  #   -DREDIS_PASSWORD=${REDIS_PASSWORD}
  #   -DMANAGER_USER=${MANAGER_USER}
  #   -DMANAGER_PASSWORD=${MANAGER_PASSWORD}
  #   -DSUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
  #   -DHOST_NAME=$(hostname)
  #   -Dcom.sun.management.jmxremote
  #   -Dcom.sun.management.jmxremote.port=7199
  #   -Dcom.sun.management.jmxremote.ssl=false
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -XX:MaxPermSize=512m
  #   -XX:+HeapDumpOnOutOfMemoryError
  #   -XX:+PrintConcurrentLocks
  #   -XX:+UseParallelGC
  #   -XX:SurvivorRatio=8
  #   -Xmn1G

ssl: true
skipNodeEmails: true

mixins:
  - common/common_actions.yml
  - haproxy/haproxy_actions.yml
  - jahia/jahia_actions.yml

onBeforeInstall: |
  nodes = []
  var cloudlets = '${globals.operating_mode}' == 'production' ? 64 : 40;
  var db_scheme = '${globals.operating_mode}' == 'production' ? 'galera' : 'galera';
  var db_count = '${globals.operating_mode}' == 'production' ? 3 : 1;
  var xmx = '${globals.operating_mode}' == 'production' ? '6000M' : '${globals.xmx}';
  var dockerImage = "${globals.jahia_docker_image}";

  node_haproxy = {
    "displayName": "Haproxy",
    "nodeGroup": "bl",
    "nodeType": "haproxy",
    "tag": "2.0.5",
    "count": 2,
    "cloudlets": 8,
    "env": {
        "DATADOGAPIKEY": "${globals.datadog_key}",
        "_PROVIDE": "haproxy",
        "_ROLE": "reverse_proxy"
      },
    "volumes": [
      "/etc/haproxy"
      ]
  }
  nodes.push(node_haproxy);

  node_cp = {
    "displayName": "Browsing",
    "count": "${settings.browsingCount}",
    "cloudlets": cloudlets,
    "nodeGroup": "cp",
    "links": "sqldb:" + db_scheme,
    "startServiceOnCreation": false,
    "env": {
        "DB_USER": "${globals.db_user}",
        "DB_PASSWORD": "${globals.db_pass}",
        "MANAGER_USER": "${globals.mngr_user}",
        "MANAGER_PASSWORD": "${globals.mngr_pass}",
        "SUPER_USER_PASSWORD": "${globals.su_pass}",
        "REDIS_PASSWORD": "${globals.redis_pass}",
        "XMS": "${globals.xms}",
        "XMX": xmx,
        "DATADOGAPIKEY": "${globals.datadog_key}",
        "DX_VERSION": "${globals.dx_version}",
        "PACKAGE_TYPE": "${globals.package_type}",
        "jahia_cfg_operatingMode": "${globals.operating_mode}",
        "_PROVIDE": "jahia",
        "_ROLE": "Browsing",
        "envName": "${globals.shortdomain}",
        "DB_ENDPOINT": db_scheme,
      }
  }
  if (dockerImage == "undefined") {
    node_cp['nodeType'] = "jahia";
    node_cp['tag'] = "${globals.dx_version}";
  } else {
    node_cp['image']  = dockerImage;
  }

  nodes.push(node_cp);

  node_proc = {
    "displayName": "Processing",
    "count": "1",
    "cloudlets": 40,
    "nodeGroup": "proc",
    "links": "sqldb:" + db_scheme,
    "startServiceOnCreation": false,
    "env": {
        "DB_USER": "${globals.db_user}",
        "DB_PASSWORD": "${globals.db_pass}",
        "MANAGER_USER": "${globals.mngr_user}",
        "MANAGER_PASSWORD": "${globals.mngr_pass}",
        "SUPER_USER_PASSWORD": "${globals.su_pass}",
        "REDIS_PASSWORD": "${globals.redis_pass}",
        "XMS": "${globals.xms}",
        "XMX": "${globals.xmx}",
        "DATADOGAPIKEY": "${globals.datadog_key}",
        "DX_VERSION": "${globals.dx_version}",
        "PACKAGE_TYPE": "${globals.package_type}",
        "jahia_cfg_operatingMode": "${globals.operating_mode}",
        "_PROVIDE": "jahia",
        "_ROLE": "Processing",
        "envName": "${globals.shortdomain}",
        "DB_ENDPOINT": db_scheme,
      }
  }
  if (dockerImage == "undefined") {
    node_proc['nodeType'] = "jahia";
    node_proc['tag'] = "${globals.dx_version}";
  } else {
    node_proc['image']  = dockerImage;
  }
  nodes.push(node_proc);

  node_mariadb = {
    "nodeType": "${globals.dbnodeType}",
    "nodeGroup": "sqldb",
    "cluster": {
      "jps": "${globals.dbbaseUrl}/addons/auto-clustering/auto-cluster.jps",
      "skipOnEnvInstall": true,
      "settings": {
        "base_url": "${globals.dbbaseUrl}",
        "scheme": db_scheme,
        "db_user": "${globals.db_user}",
        "db_pass": "${globals.db_pass}",
        "path": "${globals.dbbaseUrl}",
        }
    },
    "count": db_count,
    "cloudlets": cloudlets,
    "env": {
      "ADMINPANEL_ENABLED": false,
      "DATADOGAPIKEY": "${globals.datadog_key}",
      "DB_USER_DATADOG": "${globals.db_user_datadog}",
      "PHPMYADMIN_ENABLED": false,
      "DB_USER": "${globals.db_user}",
      "DB_PASS": "${globals.db_pass}",
      "_PROVIDE": "Database",
      "_ROLE": db_scheme,
      "envName": "${globals.shortdomain}",
      "jahia_cfg_operatingMode": "${globals.operating_mode}",
    }
  }
  nodes.push(node_mariadb);
  var resp = {
    result: 0,
    nodes: nodes
  };
  return resp;

nodes: definedInOnBeforeInstall

# --Events --

onUninstall:
  removeSudoers: ${targetNodes.nodeGroup}

onInstall:
  - log: "## Beginning installation of Jahia"
  - setGlobalEnvVars

  - setSudoer: sqldb

  - setupSqlDB

  - if (settings.skipStart != 'true'):
      - createJahiaDatabase

  - createDataDogUser

  - installJahia

  - installHaproxy

  - setupDatadogAgentSql: sqldb

onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeNodeFromHaproxy:
          nodeId: ${@i.id}
          nodeIp: ${@i.intIP}

onAfterServiceScaleOut[cp]:
  - forEach(event.response.nodes):
      - onAfterBrowsingScaleOut:
          newNode: ${@i.id}
  - resetHaproxyBackends

onAfterRedeployContainer[cp]:
  - onAfterRedeployJahiaContainer: cp

onAfterRedeployContainer[proc]:
  - onAfterRedeployJahiaContainer: proc

onBeforeClone:
  - log: "## Disable tomcat autostart before cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat off
    user: root

onAfterClone:
  - log: "## Reenable tomcat autostart after cloning env"
  - cmd[cp, proc]:
      - chkconfig tomcat on
    user: root
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/utils/onAfterClone.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}
  - script: |
      var newEnv = "${event.response.env.appid}";
      data = {
        "targetAppid": newEnv,
        "manifest": "${baseUrl}/update.yml"
        };
      res = jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
      return {"result": 0, "out": res}

onAfterStart:
  - onAfterProxySqlStart: proxy
# -- Actions --

actions:
  onAfterProxySqlStart:
    - cmd[${this}]:
        /root/node-recovery.sh -n ${nodes.sqldb.first.id}
      user: root
    - if (nodes.sqldb.length > 1):
        - cmd[${this}]:
            /root/node-recovery.sh -n ${nodes.sqldb.last.id}
          user: root

  setupSqlDB:
    - log: "## Setup MariaDB logrotate on ${this}"
    - cmd[sqldb]: |-
        wget -O /etc/logrotate.d/mysql ${baseUrl}/configs/logrotate_mysql
        logrotate -f /etc/logrotate.d/mysql
      user: root

  createJahiaDatabase:
    - log: "## Create DX's Jahia database and user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE DATABASE IF NOT EXISTS jahia CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql -e "grant all privileges on jahia.* to '${globals.db_user}'@'%' identified by '${globals.db_pass}';"
        mysql -e "flush privileges;"
      user: root

  createDataDogUser:
    - log: "## Create Datadog database user"
    - cmd[${nodes.sqldb.master.id}]: |-
        mysql -e "CREATE USER 'datadog'@'localhost' IDENTIFIED BY '${DB_USER_DATADOG}';"
        mysql -e "GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;"
        mysql -e "GRANT PROCESS ON *.* TO 'datadog'@'localhost';"
        mysql -e "GRANT SELECT ON performance_schema.* TO 'datadog'@'localhost';"
      user: root

  setupDatadogAgentSql:
    - log: "## Finalize Datadog agent setup on ${this}"
    - cmd [${this}]: |-
        DD_API_KEY=${globals.datadog_key} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
        echo "tags:" >> /etc/datadog-agent/datadog.yaml
        echo " - env:${PACKAGE_TYPE}" >> /etc/datadog-agent/datadog.yaml
        echo " - product:jahia" >> /etc/datadog-agent/datadog.yaml
        echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
        echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
        echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
        echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
        echo " - envmode:${jahia_cfg_operatingMode}" >> /etc/datadog-agent/datadog.yaml
        echo "---" > /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "logs:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    path: /var/log/mysql/mysqld.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "  - type: file" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    path: /var/log/mysql/slow-queries.log" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    source: mysql" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    service: ${env.shortdomain}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "init_config:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "instances:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "  - server: 127.0.0.1" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    user: datadog" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    pass: ${DB_USER_DATADOG}" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    sock: /var/lib/mysql/mysql.sock" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "    tags:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "      - 'env:${PACKAGE_TYPE}'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "      - 'role:database'" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "options:" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   replication: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   galera_cluster: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   extra_status_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   extra_innodb_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   extra_performance_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   schema_size_metrics: true" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        echo "   disable_innodb_metrics: false" >> /etc/datadog-agent/conf.d/mysql.d/conf.yaml
        wget -O /usr/local/bin/set_dd_tags.sh ${baseUrl}/scripts/set_dd_tags.sh
        wget -O /etc/cron.d/set_dd_tags_cron ${baseUrl}/configs/set_dd_tags_cron
        chmod u+x /usr/local/bin/set_dd_tags.sh
        chmod 644 /var/log/mysql/mysqld.log
        chmod 644 /var/log/mysql/slow-queries.log
        systemctl restart crond datadog-agent
      user: root

  setupDatadogAgentPerNode:
    - log: "## Finalize Datadog agent on ${this}"
    - cmd[${this}]: |-
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
        chmod 644 /opt/tomcat/logs/catalina.out
        /usr/local/bin/set_dd_tags.sh
        systemctl restart crond
        systemctl enable datadog-agent
      user: root

success: /text/success.md
settings:
  fields:
    - name: dxVersion
      type: string
      caption: Jahia DX version
      required: true
    - name: rootpwd
      type: string
      caption: Jahia DX root password
      vtype: string
      required: true
    - name: toolspwd
      type: string
      caption: Jahia tools password
      vtype: string
      required: true
    - name: browsingCount
      type: string
      caption: Number of DX browsing nodes
      vtype: string
      required: true
      default: 2

    - name: shortdomain
      type: envname
      caption: Environment
      required: true
    - name: displayName
      type: string
    - name: mode
      type: radio-fieldset
      caption: Operating Mode
      values:
        production: production
        development: development
      default: production
    - name: ddogApikey
      type: string
      caption: Datadog API KEY
      required: true
      default: NoDatadog

    - name: jahiaDockerImage
      inputType: hidden
      type: string
      default: 'undefined'
    - name: path
      inputType: hidden
      type: string
      default: 'https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master'
