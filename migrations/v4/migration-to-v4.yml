---
type: update
version: 1.5.2
name: Migrate Jahia env to v4
id: migrate-jahia-env-v4

# Required for healthchecks
mixins:
  - "../../common/common_actions.yml"
  - "../../jahia/jahia_actions.yml"
  - "../../jahia/jahia-module-management.yml"
  - "../../database/mariadb_actions.yml"
  - "../../database/galera_actions.yml"
  - "../../database/proxysql_actions.yml"
  - "../../haproxy/haproxy_actions.yml"
  - "../../utils/compare-versions.yml"

globals:
  version: 4

####
# Ansible has a weird behavior when receiving a variable in its parameters,
# it replaces " with ' which leads to an invalid json. To avoid the bug pass the parameters package_settings as follow :
# -e "package_settings=' {\"papi_hostname\":\"papi[.dev].trial.jahia.com\",\"papi_token\":\"TMP_TOKEN\", \"status\": \"{{status }}\"}'"
####

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - eventsUpdate
  ### End Pre-checks

#  - updatHaproxyHealthcheck                            # PAAS-1345
#  - updateDatadogProcessCheck                          # PAAS-1465
#  - fixHaproxyBackendMonitors                          # PAAS-1492
#  - addJelasticExposeEnvVar                            # PAAS-1453
#  - gotJexperience                                     # PAAS-1458 test if jexperience module is present
#  - if("${globals.gotJexperienceBundleInfo}" != ""):   # if present then
#      - gotJexperienceVersion                          #     get is version
#      - if("${globals.gotJexperienceVersion}" != ""):  #     if we got a version then
#          - isJexperienceUpdateNeeded                  #         test if needed to be updated to 1.11.4, 1.12.2 or 1.12.3
#          - if(${globals.needJexperienceUpdate}):      #         if needed then
#              - updateJexperienceVersion               #             download the jar in the module folder
  - fixDatadogServiceTag                               # PAAS-1479
  - fixDatadogMariaDBUser                              # COPS-308
  - registerWithPapi                                   # PAAS-1501

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}/../../update.yml"

  updatHaproxyHealthcheck:
    - cmd[bl]: |-
        rm -f /etc/haproxy/haproxy.cfg.d/healthcheck.sh
        wget -qO /etc/sysconfig/haproxy ${baseUrl}../../configs/haproxy-sysconfig
        wget -qO /etc/haproxy/haproxy.cfg.d/10-jahia.cfg ${baseUrl}../../configs/haproxy-10-jahia.cfg
        wget -qO /etc/haproxy/haproxy.cfg.d/11-proc.cfg ${baseUrl}../../configs/haproxy-11-proc.cfg
        echo "    server ${env.appid}-${nodes.proc.first.id} ${nodes.proc.first.intIP}:80 check cookie s${nodes.proc.first.id}" >> /etc/haproxy/haproxy.cfg.d/11-proc.cfg
      user: root
    - forEach(nodes.cp):
        cmd[bl]: |-
          echo "    server ${env.appid}-${@i.id} ${@i.intIP}:80 check cookie s${@i.id}" >> /etc/haproxy/haproxy.cfg.d/10-jahia.cfg
    - cmd[bl]: |-
        service haproxy reload
      user: root

  updateDatadogProcessCheck:
    - cmd [bl]: |-
        conf_file='/etc/datadog-agent/conf.d/process.d/conf.yaml'
        dist_conf_file="${baseUrl}../../configs/dd_agent_process_conf.yml"
        grep_str='pid_cache_duration|shared_process_list_cache_duration|min_collection_interval'
        if [ $(grep -E $grep_str $conf_file | wc -l) -eq 3 ]; then
          echo "Process check conf already up-to-date, nothing to do."
          exit 0
        fi
        curl -fLSso $conf_file $dist_conf_file
      user: root

  gotJexperience:
    - cmd[proc]: |-
        find /data/digital-factory-data/bundles-deployed -type f -name 'bundle.info' -exec grep -l '/jexperience/' {} \+
        exit 0
    - setGlobals:
        gotJexperienceBundleInfo: ${response.out}

  fixHaproxyBackendMonitors:
    cmd[bl]: |-
      if ! grep -qE "enable_service_check" /etc/datadog-agent/conf.d/haproxy.d/conf.yaml; then
        wget -qO /etc/datadog-agent/checks.d/haproxy_one_remaining_browsing.py ${baseUrl}/../../scripts/haproxy_one_remaining_browsing.py
        chown dd-agent:dd-agent /etc/datadog-agent/checks.d/haproxy_one_remaining_browsing.py
        ln -s /etc/datadog-agent/conf.d/haproxy.d/conf.yaml /etc/datadog-agent/conf.d/haproxy_one_remaining_browsing.yaml
        echo "    enable_service_check: true" >> /etc/datadog-agent/conf.d/haproxy.d/conf.yaml
        echo "    status_check: true" >> /etc/datadog-agent/conf.d/haproxy.d/conf.yaml
        systemctl restart datadog-agent
      fi
    user: root

  gotJexperienceVersion:
    - cmd[proc]: |-
        if [ -n "${globals.gotJexperienceBundleInfo}" ]; then
          awk -F'[/:]' '$1=="dx" {print $NF}' ${globals.gotJexperienceBundleInfo}
        fi
    - setGlobals:
        gotJexperienceVersion: ${response.out}

  isJexperienceUpdateNeeded:
    - getJahiaVersion
    # Get jExperience version to install according to Jahia env version:
    # - Jahia 7.3.x ==> jExperience 1.11.4
    # - Jahia 8 < 8.0.2 ==> jExperience 1.12.2
    # - Jahia 8.0.2+ ==> jExperience 1.12.3
    - isVersionLower:
        a: ${globals.jahiaVersion}
        b: 8.0.0.0
        res: isLowerThan8000
    - if( ${globals.isLowerThan8000} ):
        - setGlobals:
            jexperience_version: 1.11.4
    - else:
        - isVersionLower:
            a: ${globals.jahiaVersion}
            b: 8.0.2.0
            res: isLowerThan8020
        - if( ${globals.isLowerThan8020} ):
            - setGlobals:
                jexperience_version: 1.12.2
        - else:
            - setGlobals:
                jexperience_version: 1.12.3
    - isVersionLower:
        a: ${globals.gotJexperienceVersion}
        b: ${globals.jexperience_version}
        res: needJexperienceUpdate

  updateJexperienceVersion:
    - upgradeJahiaModule:
        module: jExperience
        version: ${globals.jexperience_version}

  addJelasticExposeEnvVar:
    - env.control.AddContainerEnvVars[cp, proc]:
        vars: {"JELASTIC_EXPOSE": "0"}

  fixDatadogServiceTag:
    - addDatadogServiceTagIpsec: cp, proc
    - addDatadogServiceTagProxySql: cp, proc
    - fixDatadogServiceTagHAProxy: bl

  addDatadogServiceTagIpsec:
    - cmd[${this}]: |-
        insert_line='    service: ${env.shortdomain}'
        if (grep -qPzo "$insert_line" /etc/datadog-agent/conf.d/strongswan_connections_status.yaml); then
          echo "Correct Service tag already there"
          exit 0
        fi
        sed -i "/source: ipsec/a\\$insert_line" /etc/datadog-agent/conf.d/strongswan_connections_status.yaml
        systemctl restart datadog-agent
      user: root

  addDatadogServiceTagProxySql:
    - cmd[${this}]: |-
        insert_line='    service: ${env.shortdomain}'
        if (grep -qPzo "$insert_line" /etc/datadog-agent/conf.d/proxysql.d/conf.yaml); then
          echo "Correct Service tag already there"
          exit 0
        fi
        sed -i "/source: proxysql/a\\$insert_line" /etc/datadog-agent/conf.d/proxysql.d/conf.yaml
        systemctl restart datadog-agent
      user: root

  fixDatadogServiceTagHAProxy:
    - cmd[${this}]: |-
        insert_line='service: ${env.shortdomain}'
        if (grep -qPzo "$insert_line" /etc/datadog-agent/conf.d/haproxy.d/conf.yaml); then
          echo "Correct Service tag already there"
          exit 0
        fi
        sed -i "s/service: haproxy/\\$insert_line/" /etc/datadog-agent/conf.d/haproxy.d/conf.yaml
        systemctl restart datadog-agent
      user: root

  fixDatadogMariaDBUser:
    # Will be applied  on every environment, faster than trying to check if the environment is impacted
    # best case the env has been restored with mariabackup and it fixes the datadog user issue
    # worst case it's just useless and it just set the same password
    cmd[${nodes.sqldb.first.id}]: mysql -e "set password for 'datadog'@'localhost' = PASSWORD('${DB_USER_DATADOG}')"

  registerWithPapi:
    cmd[${nodes.cp.first.id}]: |-
      if ! rpm --quiet -q jq; then
        echo "[INFO] Installing jq to parse responses"
        yum install -y jq > /dev/null
      fi

      PAPI_HOSTNAME="${settings.papi_hostname}"
      PAPI_TOKEN_HEADER="X-PAPI-KEY: ${settings.papi_token}"
      PAPI_CONTENT_TYPE_HEADER="Content-Type: application/json"
      PAPIER_DESCRIPTION="paas_${env.shortdomain}"
      LOG_FILE=/var/log/jelastic-packages/migration.log

      #### Checks if papier exists ###
      PAPIER_URI="https://$PAPI_HOSTNAME/api/v1/papier"
      papier=$(curl -s "$PAPIER_URI?description=$PAPIER_DESCRIPTION" -H "$PAPI_TOKEN_HEADER")

      if [ $? -ne 0 ]; then
          echo "Failed to check if papier exists"
          exit 1
      fi

      ### Creates papier if doesn't exist ###
      if [ $(echo $papier | jq length) -eq 0 ]; then
          data="{\"kind\": \"m_to_m\", \"description\": \"$PAPIER_DESCRIPTION\"}"
          papier=$(curl -s -XPOST "$PAPIER_URI" -H "$PAPI_TOKEN_HEADER" -H "$PAPI_CONTENT_TYPE_HEADER" -d "${data}")

          if [ $? -ne 0 ]; then
            echo "Failed to create papier : curl command failed" | tee -a $LOG_FILE
            exit 1
          fi

          papier_id=$(echo $papier | jq .papier_id)
          if [[ ! "$papier_id" =~ ^[0-9]+$ ]]; then
            echo "Failed to create papier: invalid response. Got $papier" | tee -a $LOG_FILE
            exit 1
          fi
          echo "Papier $papier_id created" >> $LOG_FILE
      else
          papier_id=$(echo $papier | jq .[0].papier_id)
          echo "Papier already exists" >> $LOG_FILE
      fi

      #### Get organization id ####
      PAAS_ORG_URI="https://$PAPI_HOSTNAME/api/v1/paas-organization"
      paas_org=$(curl -s "$PAAS_ORG_URI?jelastic_login=${user.email}" -H "$PAPI_TOKEN_HEADER")
      if [ $? -ne 0 ]; then
        echo "Failed get organization id : curl command failed" | tee -a $LOG_FILE
        exit 1
      fi
      organization_id=$(echo $paas_org | jq -r .[0].paas_organization_id)
      if [[ ! "$organization_id" =~ ^[0-9]+$ ]]; then
        echo "Failed to get organization id: invalid response. Got $paas_org" | tee -a $LOG_FILE
        exit 1
      fi

      #### Check if environment already exists  ####
      PAAS_ENV_URI="https://$PAPI_HOSTNAME/api/v1/paas-environment"
      env=$(curl -s "$PAAS_ENV_URI?namespace=${env.shortdomain}" -H "$PAPI_TOKEN_HEADER")
      if [ $? -ne 0 ]; then
        echo "Failed to check if paas-environment exists" | tee -a $LOG_FILE
        exit 1
      fi

      # Creates environment if doesn't exist
      if [ $(echo $env | jq length) -eq 0 ]; then
          VERSION=$(echo $DX_VERSION | sed 's/\./-/g')
          data="{
            \"jelastic_appid\": \"${env.appid}\",
            \"paas_organization_id\": $organization_id,
            \"paas_product_version_id\": \"dx_$VERSION\",
            \"namespace\": \"${env.shortdomain}\",
            \"papier_id\": $papier_id
          }"
          env=$(curl -s -XPOST "$PAAS_ENV_URI" -H "$PAPI_TOKEN_HEADER" -H "$PAPI_CONTENT_TYPE_HEADER" -d "${data}")

          if [ $? -ne 0 ]; then
              echo "Failed to create paas-environment" | tee -a $LOG_FILE
              exit 1
          fi

          env_id=$(echo $env | jq -r .environment_id)
          if [[ ! "$env_id" =~ ^[0-9]+$ ]]; then
              echo "Failed to create environment: invalid response. Got $env" | tee -a $LOG_FILE
              exit 1
          fi
          echo "Env $env_id created" >> $LOG_FILE

          if [ "${settings.status}" = "stopped" ]; then
              data="{\"status\":\"stopped\"}"
              env=$(curl -s -XPUT "$PAAS_ENV_URI/$env_id" -H "$PAPI_TOKEN_HEADER" -H "$PAPI_CONTENT_TYPE_HEADER" -d "${data}")
              if [ $? -ne 0 ]; then
                echo "Failed to set environment status to stopped: request failed" | tee -a $LOG_FILE
                exit 1
              fi

              env_id=$(echo $env | jq -r .environment_id)
              if [[ ! "$env_id" =~ ^[0-9]+$ ]]; then
                echo "Failed to set environment status to stop: invalid response. Got $env" | tee -a $LOG_FILE
                exit 1
              fi
              echo "Env $env_id status set to stopped" >> $LOG_FILE
          fi
      else
          echo "Environment already exists" >> $LOG_FILE
      fi

settings:
  fields:
    - name: papi_hostname
      type: string
      caption: Papi hostname
      required: true
    - name: papi_token
      type: string
      caption: Papi token
      required: true
    - name: status
      type: string
      caption: Env status (running/stopped)
      vtype: string
      required: true
