---
type: update
version: 1.5.2
name: Migrate Jahia env to v4
id: migrate-jahia-env-v4

# Required for healthchecks
mixins:
  - "../../common/common_actions.yml"
  - "../../jahia/jahia_actions.yml"
  - "../../jahia/jahia-module-management.yml"
  - "../../database/mariadb_actions.yml"
  - "../../database/galera_actions.yml"
  - "../../database/proxysql_actions.yml"
  - "../../haproxy/haproxy_actions.yml"
  - "../../utils/compare-versions.yml"

globals:
  version: 4

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - eventsUpdate
  ### End Pre-checks

  - updatHaproxyHealthcheck                            # PAAS-1345
  - updateDatadogProcessCheck                          # PAAS-1465
  - gotJexperience                                     # PAAS-1458 test if jexperience module is present
  - if("${globals.bfile}" != ""):                      # if present then
      - gotJexperienceVersion                          #     get is version
      - if("${globals.gotJexperienceVersion}" != ""):  #     if we got a version then
          - isJexperienceUpdateNeeded                  #         test if needed to be updated to 1.11.4, 1.12.2 or 1.12.3
          - if(${globals.needJexperienceUpdate}):      #         if needed then
              - updateJexperienceVersion               #             download the jar in the module folder

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}/../../update.yml"

  updatHaproxyHealthcheck:
    - cmd[bl]: |-
        rm -f /etc/haproxy/haproxy.cfg.d/healthcheck.sh
        wget -qO /etc/sysconfig/haproxy ${baseUrl}../../configs/haproxy-sysconfig
        wget -qO /etc/haproxy/haproxy.cfg.d/10-jahia.cfg ${baseUrl}../../configs/haproxy-10-jahia.cfg
        wget -qO /etc/haproxy/haproxy.cfg.d/11-proc.cfg ${baseUrl}../../configs/haproxy-11-proc.cfg
        echo "    server ${env.appid}-${nodes.proc.first.id} ${nodes.proc.first.intIP}:80 check cookie s${nodes.proc.first.id}" >> /etc/haproxy/haproxy.cfg.d/11-proc.cfg
      user: root
    - forEach(nodes.cp):
        cmd[bl]: |-
          echo "    server ${env.appid}-${@i.id} ${@i.intIP}:80 check cookie s${@i.id}" >> /etc/haproxy/haproxy.cfg.d/10-jahia.cfg
    - cmd[bl]: |-
        service haproxy reload
      user: root

  updateDatadogProcessCheck:
    - cmd [bl]: |-
        conf_file='/etc/datadog-agent/conf.d/process.d/conf.yaml'
        dist_conf_file="${baseUrl}../../configs/dd_agent_process_conf.yml"
        grep_str='pid_cache_duration|shared_process_list_cache_duration|min_collection_interval'
        if [ $(grep -E $grep_str $conf_file | wc -l) -eq 3 ]; then
          echo "Process check conf already up-to-date, nothing to do."
          exit 0
        fi
        curl -fLSso $conf_file $dist_conf_file
      user: root

  gotJexperience:
    - cmd[proc]: |-
        find /data/digital-factory-data/bundles-deployed -type f -name 'bundle.info' -exec grep -l '/jexperience/' {} \+
        exit 0
    - setGlobals:
        bfile: ${response.out}

  gotJexperienceVersion:
    - cmd[proc]: |-
        if [ -n "${globals.bfile}" ]; then
          awk -F'[/:]' '$1=="dx" {print $NF}' ${globals.bfile}
        fi
    - setGlobals:
        gotJexperienceVersion: ${response.out}

  isJexperienceUpdateNeeded:
    - getJahiaVersion
    # Get jExperience version to install according to Jahia env version:
    # - Jahia 7.3.x ==> jExperience 1.11.4
    # - Jahia 8 < 8.0.2 ==> jExperience 1.12.2
    # - Jahia 8.0.2+ ==> jExperience 1.12.3
    - isVersionLower:
        a: ${globals.jahiaVersion}
        b: 8.0.0.0
        res: isLowerThan8000
    - if( ${globals.isLowerThan8000} ):
        - setGlobals:
            jexperience_version: 1.11.4
    - else:
        - isVersionLower:
            a: ${globals.jahiaVersion}
            b: 8.0.2.0
            res: isLowerThan8020
        - if( ${globals.isLowerThan8020} ):
            - setGlobals:
                jexperience_version: 1.12.2
        - else:
            - setGlobals:
                jexperience_version: 1.12.3
    - isVersionLower:
        a: ${globals.gotJexperienceVersion}
        b: ${globals.jexperience_version}
        res: needJexperienceUpdate

  updateJexperienceVersion:
    - upgradeJahiaModule:
        module: jExperience
        version: ${globals.jexperience_version}
