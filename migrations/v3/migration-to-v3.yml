---
type: update
version: 1.5.2
name: Migrate Jahia env to v3
id: migrate-jahia-env-v3

# Required for healthchecks
mixins:
  - "../../common/common_actions.yml"
  - "../../jahia/jahia_actions.yml"
  - "../../jahia/jahia-upgrade-healthcheck.yml"
  - "../../database/mariadb_actions.yml"
  - "../../database/galera_actions.yml"
  - "../../database/proxysql_actions.yml"
  - "../../haproxy/haproxy_actions.yml"

globals:
  version: 3

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - eventsUpdate
  ### End Pre-checks

  - addHealthcheckEnvVar # PAAS-1369
  - upgradeHealthcheckModule # PAAS-1317
  - redeployTomcat
  - finishProxysqlInstall
  - if (nodes.sqldb.length > 1):
      jahiaRollingRestart
  - fetchLogEventScript # PAAS-1323
  - vaultTomcatSetup  # PAAS-1208
  - checkProductVersion # PAAS-1342
  - updateHaproxyConf # PAAS-1357
  - increaseHaproxyTimeout # PAAS-1433

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  ### End Post-actions

actions:
  # The upgrade Healtcheck module is cluster-wide so we can't rely on Tomcat nodes
  # redeploy to upgrade the healthcheck, otherwise the healthcheck will fail on all nodes
  # as soon as the proc node will be redeployed
  upgradeHealthcheckModule:
    - api [${nodes.cp.first.id}]: environment.control.GetNodeInfo
    - if ("${response.node.version}" > "8.0.0.0"):
        upgradeJahiaHealthcheckModule:
          version: "2.3.1"
    - else:
        upgradeJahiaHealthcheckModule:
          version: "1.2.1"

  eventsUpdate:
    install:
      jps: "${baseUrl}/../../update.yml"

  vaultTomcatSetup:
    # Get informations from bl nodegroup because that's
    # the only one vault ready in v2
    - environment.control.GetContainerEnvVarsByGroup [bl]
    - environment.control.AddContainerEnvVars [proc, cp]:
        vars:
          VAULT_ROLE_ID: ${response.object.VAULT_ROLE_ID}
          VAULT_SECRET_ID: ${response.object.VAULT_SECRET_ID}
          VAULT_CLUSTER_URL: ${response.object.VAULT_CLUSTER_URL}

  checkProductVersion:
    - api [${nodes.cp.first.id}]: environment.control.GetNodeInfo
    - setGlobals:
        jahiaVersion: ${response.node.version}
    - script: |
        const envName = "${env.envName}";
        const targetJahiaVersion = "${globals.jahiaVersion}";
        currentJahiaVersion = jelastic.env.control.GetNodeGroups(envName, session).object.filter(function (object) {
                                        return object.name == "cp";
                                      }).pop().productVersion;
        if (currentJahiaVersion == targetJahiaVersion) {
          return {"result": 0, "out": "cp NodeGroup data has the correct Jahia version"};
        }
        resp = jelastic.env.control.ApplyNodeGroupData(envName, session, nodeGroup='cp', data={'productVersion': targetJahiaVersion});
        return {"result": 0, "out": "Jahia version has been updated on cp NodeGroup data"};

  updateHaproxyConf:
    - cmd [bl]: |-
        haproxy_conf_path='/etc/haproxy/haproxy.cfg.d/00-global.cfg'
        if [ "$(grep haproxy_adm_panel_path_beg /etc/haproxy/haproxy.cfg.d/00-global.cfg)" ]; then
          echo "Update haproxy conf already done"
          exit 0
        fi
        sed -i 's/\!tools #HTTP_AUTH_BASIC/!tools !haproxy_adm_panel_path_beg #HTTP_AUTH_BASIC/' $haproxy_conf_path
        sed -i '/^.*haproxy_adm_panel_path_beg.*/i \    #acl haproxy_adm_panel_path_beg  path_beg -i /haproxy_adm_panel #HTTP_AUTH_BASIC' $haproxy_conf_path
        echo "[INFO] Haproxy basic authentication rules updated"
        sed -i 's/\(.*acl healthcheck path\)\( \/modules\/healthcheck\)/\1 \/healthcheck\2/g' $haproxy_conf_path
        sed -i 's/\(.*http-request allow if healthcheck\)/\1 or haproxy_adm_panel/g' $haproxy_conf_path
        sed -i '/^.*or haproxy_adm_panel/i \    acl haproxy_adm_panel path /haproxy_adm_panel' $haproxy_conf_path
        echo "[INFO] Haproxy healthcheck rules updated"
        sudo service haproxy reload
      user: haproxy

  fetchLogEventScript:
    - cmd[*]: |-
        wget -qO /usr/local/bin/log_event.sh ${baseUrl}../../scripts/log_events.sh
        chmod u+x /usr/local/bin/log_event.sh
      user: root

  addHealthcheckEnvVar:
    - api [cp, proc]: env.control.AddContainerEnvVars
      vars: {"HEALTHCHECK_DURATION": "240"}

  increaseHaproxyTimeout:
    cmd[bl]: |-
      sed 's/timeout \(client\|server\)\( *\) 1m$/timeout \1\2 5m/g' -i /etc/haproxy/haproxy.cfg.d/00-global.cfg
      sudo service haproxy reload
    user: haproxy

  redeployProcessing:
    - api: environment.control.RedeployContainersByGroup
      nodeGroup: proc
      tag: ${nodes.proc.version}
      useExistingVolumes: false
      skipReinstall: false
      envName: ${env.envName}

  redeployBrowsing:
    - forEach(nodes.cp):
        - api: environment.control.RedeployContainerById
          nodeId: ${@i.id}
          tag: ${nodes.proc.version}
          useExistingVolumes: false
          skipReinstall: false
          envName: ${env.envName}

  redeployTomcat:
    - redeployProcessing
    - redeployBrowsing

  jahiaRollingRestart:
    install:
      jps: "${baseUrl}/../../jahia/jahia-rolling-restart.yml"
