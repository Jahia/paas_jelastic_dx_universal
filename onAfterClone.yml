---
type: update
version: 1.5.2
name: Jahia - after clone
logo: /images/jahia-logo-70x70.png
id: jahia-dx-cluster-universal-after-clone
description:
  short: Jahia - after clone

mixins:
  - database/galera_actions.yml

globals:
  galeraLogPosition: 0
  galeraMasterNode: "0"

onInstall:
  - log: Start post-clone setup
  - api [*]: env.control.AddContainerEnvVars
    vars: {"envName": "${env.shortdomain}"}

  - if (nodes.sqldb.length > 1):
      letsEscapeTheIfDarkDimensionToSetupGaleraCluster

  - resetHaproxyBackends: bl
  - cmd[proc]: |-
      query="delete from JR_J_LOCAL_REVISIONS"
      mysql -h $DB_ENDPOINT -u $DB_USER -p$DB_PASSWORD -s jahia -e "$query"
  - cmd[proc, cp]: |-
      rm /opt/tomcat/logs/*
      if [ $(echo $DX_VERSION | sed 's/\.//g') -lt 7232 ]; then
        touch $DATA_PATH/digital-factory-data/backup-restore
      else
        touch $DATA_PATH/digital-factory-data/safe-env-clone
      fi
      sudo rm /data/digital-factory-data/repository/workspaces/*
      sudo rm /data/digital-factory-data/repository/revisionNode
      sudo rm -f /data/digital-factory-data/karaf/etc/org.jahia.modules.marketingfactory.settings-mf.cfg
      sed -i "s/\(.*serverId.*=\).*/\1 $HOSTNAME/g" /opt/tomcat/conf/digital-factory-config/jahia/jahia.node.properties
      sudo service tomcat start
  - environment.control.ApplyNodeGroupData [proc, cp]:
      data:
        envLink: ""
  - cmd[*]: |-
      rm -f /etc/ssh/ssh_host*
      service sshd restart
    user: root
  - log: "## Enable tomcat autostart on the cloned env"
  - cmd[cp, proc]:
      - chkconfig tomcat on
    user: root
  - api: jelastic.env.control.SetEnvDisplayName
    displayname: "${env.shortdomain}"
  - updateDatadogConf


actions:
  resetHaproxyBackends:
    - cmd[bl]: |-
        sed -e "/$server.*:80 check cookie/d" \
            -i /etc/haproxy/haproxy.cfg.d/{10-jahia,11-proc}.cfg
        echo "    server ${env.appid}-${nodes.proc.first.id} ${nodes.proc.first.intIP}:80 check cookie s${nodes.proc.first.id}" \
            >> /etc/haproxy/haproxy.cfg.d/11-proc.cfg
        sed -e 's/cook(JSESSIONID),lower -m beg s.*/cook(JSESSIONID),lower -m beg s${nodes.proc.first.id} }/' \
            -i /etc/haproxy/haproxy.cfg.d/00-global.cfg
    - forEach(nodes.cp):
        cmd[${this}]: |-
          echo "    server ${env.appid}-${@i.id} ${@i.intIP}:80 check cookie s${@i.id}" >> /etc/haproxy/haproxy.cfg.d/10-jahia.cfg
          sudo service haproxy reload
        user: haproxy

  updateDatadogConf:
    - log: "## Updating datadog-agent conf"
    - api[*]:
        method: environment.control.ExecCmdByGroup
        params:
          userName: root
          commandList:
            - command: "if [ ! -d /etc/datadog-agent ]; then exit 0; fi; \
                sed -i 's/^\\( *service: \\).*/\\1${env.envName}/' /etc/datadog-agent/conf.d/*/conf.yaml; \
                systemctl restart datadog-agent"

  setGaleraMaster:
    - cmd[${this}]: |-
        $(mysqld --wsrep-recover 2>&1 | awk -F: '/Recovered position/ {print "export position="$NF" uuid="substr($(NF-1),2)}')
        echo "version: 2.1" > /var/lib/mysql/grastate.dat
        echo "uuid:    "$uuid >> /var/lib/mysql/grastate.dat
        echo "seqno:   "$position >> /var/lib/mysql/grastate.dat
        echo $position
    - if ("${response.out}" > "${globals.galeraLogPosition}"):
        - setGlobals:
            galeraLogPosition: "${response.out}"
            galeraMasterNode: "${this}"
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred while configuring mysql replication."

  letsEscapeTheIfDarkDimensionToSetupGaleraCluster:
    - cmd[sqldb]: |-
        /etc/init.d/mysql stop; pkill -9 mysql
        [ -f /etc/mysql/conf.d/galera.cnf ] && rm -f /etc/mysql/conf.d/galera.cnf
        [ -f /var/lib/mysql/grastate.dat ] && rm -f /var/lib/mysql/grastate.dat
        [ -f /var/lib/mysql/gvwstate.dat ] && rm -f /var/lib/mysql/gvwstate.dat
        [ -f /var/lib/mysql/galera.cache ] && rm -f /var/lib/mysql/galera.cache
        exit 0
      user: root
    - initialSetup
    - setupSeeds
    - forEach(i:nodes.sqldb):
        - setupInstance:
            id: "${@i.id}"
        - cmd[${@i.id}]: "systemctl daemon-reload"
          user: root
        - setGaleraMaster: ${@i.id}

    - cmd[${globals.galeraMasterNode}]: |-
        echo "safe_to_bootstrap: 1" >> /var/lib/mysql/grastate.dat
        service mysql start
        # Wait for wsrep to crash...
        sleep 10
        service mysql restart
      user: root
    - forEach(n:nodes.sqldb):
      - if ("${@n.id}" != "${globals.galeraMasterNode}"):
           cmd[${@n.id}]: |-
             echo "safe_to_bootstrap: 0" >> /var/lib/mysql/grastate.dat
             service mysql start
           user: root
