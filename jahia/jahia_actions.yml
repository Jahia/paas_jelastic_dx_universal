---
actions:
  onAfterBrowsingScaleOut:
    - setSudoer: ${this.newNode}
    - copyApp: ${this.newNode}
    - setToolsPwd: ${this.newNode}
    - setupDatadogAgentPerNode: ${this.newNode}
    - cmd[${this.newNode}]: |-
        if (service tomcat status); then
          echo "Now Restarting Tomcat"
          service tomcat restart
        else
          echo "Now Launching Tomcat"
          service tomcat start
        fi
      user: root

  onAfterRedeployJahiaContainer:
    - cmd[${this}]:
        - service tomcat stop
      user: root
    - setSudoer: ${this}
    - copyApp: ${this}
    - setToolsPwd: ${this}
    - if ("${this}" == "cp"):
        cmd[${this}]:
          - sed -i "s#\(processingServer\s*=\).*#\1 false#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
    - setupDatadogAgent: ${this}
    - cmd[${this}]: |-
          if [ $(echo $DX_VERSION | sed 's/\.//g') -ge 7320 ]; then
            touch "/data/digital-factory-data/[persisted-configurations].dorestore"
            chown tomcat: "/data/digital-factory-data/[persisted-configurations].dorestore"
          fi
    - cmd[${this}]: |-
          source /etc/locale.conf
          echo "JAHIA_UPGRADE=$JAHIA_UPGRADE"
          if [ "$JAHIA_UPGRADE" == "true" ]; then
            echo "This is an upgrade, processing's tomcat will not be restarted now"
          else
            echo "This is a regular redeploy, restart tomcat now"
            service tomcat start
          fi
      user: root

  stopJahia:
    cmd[${this}]: "service tomcat stop"
    user: root

  initJahiaDatabase:
    - log: "## Import DX schema in database"
    - cmd[${nodes.proc.first.id}]: cat $DATA_PATH/digital-factory-data/db/sql/schema/mysql/*.sql | mysql -h $DB_ENDPOINT -u$DB_USER -p$DB_PASSWORD -f jahia

  installJahia:
    - setSudoer: proc, cp

    - environment.control.ApplyNodeGroupData [proc, cp]:
        data:
          productName: dx
          productVersion: ${globals.dx_version}
          packageType: ${globals.package_type}

    - initJahiaDatabase
    - log: "## Determine JDK version for good _JAVA_OPTIONS envvar"
    - cmd[proc, cp]: |-
        case "$($JAVA_HOME/bin/java -version 2>&1 | awk 'NR==1 {print gensub("(\"|_.*)", "", "g", $3)}')" in
          1.8*)
              j_opts='${globals.java_opts}'
              ;;
          *)
              j_opts='${globals.java_opts} -Xlog:gc:file=/opt/tomcat/logs/gc.log:time,uptime,level,pid,tid,tags'
              ;;
        esac
        sed -e '2isource /.jelenv' -e "s#\(^JAVA_OPTS=.*\)\(\"$\)#\1 ${j_opts}\2#" -i /opt/tomcat/conf/tomcat-env.sh
    - setJahiaPropertiesEnvvars
    - copyApp: proc, cp
    - cmd[proc]: |-
        base64 -d <<< "${settings.rootpwd.toBase64()}" > $DATA_PATH/digital-factory-data/root.pwd
      user: tomcat
    - defineToolsPwd
    - setToolsPwd: proc, cp

    - if (settings.skipStart != 'true'):
        - api: env.control.ExecDockerRunCmd
          nodeId: ${nodes.proc.first.id}

    - sleep:
        - milliseconds: 120000

    - if (settings.skipStart != 'true'):
        - env.control.ExecDockerRunCmd [${nodes.cp.join(id,)}]

  setJahiaPropertiesEnvvars:
    - log: "## Setting jahia.properties envvars"
    - cmd [${nodes.proc.first.id}]: '[ -d /opt/magick ] && echo "/opt/magick/bin" || echo "/usr/bin"'
    - setGlobals:
        jahia_cfg_imageMagickPath: ${response.out}
    - cmd [${nodes.proc.first.id}]: echo $(ls -d /opt/*maven*/bin/mvn)
    - setGlobals:
        jahia_cfg_mvnPath: ${response.out}
    - if (settings.mode == "production"):
        - setGlobals:
            jahia_cfg_org_jahia_ehcachemanager_maxBytesLocalHeap: ${globals.org_jahia_ehcachemanager_maxBytesLocalHeap_prod}
            jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap_cp: ${globals.org_jahia_ehcachemanager_big_maxBytesLocalHeap_prod_cp}
            jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap_proc: ${globals.org_jahia_ehcachemanager_big_maxBytesLocalHeap_prod_proc}
    - else:
        - setGlobals:
            jahia_cfg_org_jahia_ehcachemanager_maxBytesLocalHeap: ${globals.org_jahia_ehcachemanager_maxBytesLocalHeap_dev}
            jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap_cp: ${globals.org_jahia_ehcachemanager_big_maxBytesLocalHeap_dev}
            jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap_proc: ${globals.org_jahia_ehcachemanager_big_maxBytesLocalHeap_dev}
    - env.control.AddContainerEnvVars [cp, proc]:
      vars:
        jahia_cfg_expandImportedFilesOnDisk: ${globals.expandImportedFilesOnDisk}
        jahia_cfg_jahiaFileUploadMaxSize: ${globals.jahiaFileUploadMaxSize}
        jahia_cfg_imageService: ${globals.imageService}
        jahia_cfg_imageMagickPath: ${globals.jahia_cfg_imageMagickPath}
        jahia_cfg_mvnPath: ${globals.jahia_cfg_mvnPath}
        jahia_cfg_org_jahia_ehcachemanager_maxBytesLocalHeap: ${globals.jahia_cfg_org_jahia_ehcachemanager_maxBytesLocalHeap}
    - env.control.AddContainerEnvVars [cp]:
      vars:
        jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap: ${globals.jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap_cp}
    - env.control.AddContainerEnvVars [proc]:
      vars:
        jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap: ${globals.jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap_proc}

  copyApp:
    - log: "## Copying Jahia app and settings its properties"
    - cmd[${this}]: |-
        [ "$_ROLE" == "Browsing" ] && sed -i "s#\(processingServer\s*=\).*#\1 false#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
        rm -rf $STACK_PATH/webapps/*
        #COPS-18 workaround, switch from loadbalance to sequential
        replace="sequential:"
        sed "s/loadbalance:/$replace/" -i /$DATA_PATH/jahia/tomcat/webapps/ROOT/META-INF/context.xml
        cp -rf $DATA_PATH/jahia/tomcat/webapps/* $STACK_PATH/webapps
        chown -R tomcat:tomcat $STACK_PATH/webapps
        sed -i "s/operatingMode/#operatingMode/" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        short_name=$(echo ${_ROLE}.$HOSTNAME | sed -r 's/^([a-Z]+)\.[a-Z]+([0-9]+)-.+$/\1.\2/' | tr 'A-Z' 'a-z')
        sed -i "s|^cluster.node.serverId.*|cluster.node.serverId = $short_name|" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
        sed -i "2i JMX_OPTS=\-XX:+UseParallelGC" /opt/tomcat/conf/tomcat-env.sh
        sed -i 's/\(^default.config.sync = \)cluster/\1disabled/' /data/digital-factory-data/karaf/etc/org.apache.karaf.cellar.groups.cfg
        sed -i '/<!-- Access log processes all example./i \\t<!-- Remote IP Valve -->\n \t<Valve className="org.apache.catalina.valves.RemoteIpValve" protocolHeader="X-Forwarded-Proto" />\n' /opt/tomcat/conf/server.xml
        sed -i 's/pattern="%h /pattern="%{org.apache.catalina.AccessLog.RemoteAddr}r /' /opt/tomcat/conf/server.xml
        sed -i 's/prefix="localhost_access_log"/prefix="access_log" rotatable="false"/g' /opt/tomcat/conf/server.xml
        #Secure cookies from cross scripting
        indent="      " && printf "$indent<cookie-config>\n$indent$indent<secure>true</secure>\n$indent$indent<http-only>true</http-only>\n$indent</cookie-config>\n" > /tmp/cookies-config
        sed -i '/<session-config>/r /tmp/cookies-config' /opt/tomcat/conf/web.xml && rm /tmp/cookies-config
        sed -e '/maxHttpHeaderSize/d' -e "s/^\(.*Connector port=\"80.*HTTP.*\)$/\1\n\t\tmaxHttpHeaderSize=\"65536\"/g" -i /opt/tomcat/conf/server.xml
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred when installing jahia."

  defineToolsPwd:
    - log: "## Now setting tools password"
    - cmd[proc]: |-
        if [ ! -f /usr/local/bin/reset-jahia-tools-manager-password.py ]; then
          wget -qO /usr/local/bin/reset-jahia-tools-manager-password.py ${baseUrl}/scripts/reset-jahia-tools-manager-password.py
          chmod u+x /usr/local/bin/reset-jahia-tools-manager-password.py
        fi
        /usr/local/bin/reset-jahia-tools-manager-password.py "${settings.toolspwd.toBase64()}" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred when defining tools password."
    - cmd [proc]: awk '$1=="jahiaToolManagerPassword" {print $NF}' $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
    - set:
        jahiaToolManagerPassword: ${response.out}
    - cmd [cp]: |-
        sed -i "s;.*jahiaToolManagerPassword.*;jahiaToolManagerPassword = ${this.jahiaToolManagerPassword};" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
    - env.control.AddContainerEnvVars [proc, cp]:
      vars:
        MANAGER_PASSWORD: ${this.jahiaToolManagerPassword}

  setToolsPwd:
    - cmd[${this}]: |-
         sed -i "s|^jahiaToolManagerPassword .*$|jahiaToolManagerPassword = $MANAGER_PASSWORD|" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties

  setupDatadogAgent:
    - log: "## Finalize Datadog agent setup on ${this}"
    - cmd [${this}]: |-
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
        chmod 644 /opt/tomcat/logs/catalina.out
        /usr/local/bin/set_dd_tags.sh
        mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
        chown tomcat:root /var/log/jelastic-packages
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        wget -qO /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${baseUrl}/configs/dd_agent_jelastic_package_conf.yml
        systemctl restart crond
        systemctl enable datadog-agent
      user: root

  setupDatadogAgentPerNode:
    - log: "## Finalize Datadog agent on ${this}"
    - cmd[${this}]: |-
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
        chmod 644 /opt/tomcat/logs/catalina.out
        mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
        chown tomcat:root /var/log/jelastic-packages
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        wget -qO /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${baseUrl}/configs/dd_agent_jelastic_package_conf.yml
        /usr/local/bin/set_dd_tags.sh
        systemctl restart crond
        systemctl enable datadog-agent
      user: root

  # Two arguments:
  #   - target: Mandatory, the target nodeId or nodeGroup. If the duration is not specified, the target
  #     can be passed as a parameter directly after the action name, e.g.: startupJahiaHealthCheck: <target>
  #   - duration: Optional, duration in seconds. Default value of 24 hours if not specified
  startupJahiaHealthCheck:
    # The .print() call surrounded by simple quotes is the only working way I found to test if the variable exists
    - if ('${this.print()}' != ''):
        set:
          duration: 86400
          target: ${this}
    - else:
        set:
          duration: ${this.duration}
          target: ${this.target}
    - cmd [${this.target}]: |-
        if ! rpm --quiet -q jq; then
          echo "[INFO] Installing jq to parse healthcheck module response"
          yum install -y jq
        fi
      user: root
    - log: "## Health check on Jahia startup, target: ${this.target}, duration : ${this.duration} seconds"
    - cmd [${this.target}]: |-
        if ! tomcat_pid=$(pgrep -u tomcat -f java); then
          echo "[ERROR] Tomcat process not found, please check." >&2
          exit 1
        fi
        
        if [ ! -f /var/log/tomcat/jahia.log ]; then
          echo "[ERROR] Jahia log file not found, it seems there is a problem with tomcat instance, please check." >&2
          exit 2
        fi
        
        startup_line=$(grep -n "s t a r t i n g" /opt/tomcat/logs/catalina.out | tail -n1 | cut -d":" -f1)
        timeout=$(($(date +%s)+${this.duration}))
        hc_url="http://127.0.0.1:8080/modules/healthcheck?token=$jahia_cfg_healthcheck_token"

        # Number of minutes allowed for Jahia login page to be reachable once tomcat startup is finished
        jahia_running_timeout=5
        
        while [ $(date +%s) -lt $timeout ]; do
          # First we test if Jahia is up with a curl request.
          if curl_resp=$(curl -f -s -m 1 "$hc_url"); then
            status=$(echo $curl_resp | jq -r ".status")
            if [ "$status" = "GREEN" ] || [ "$status" = "YELLOW" ]; then
              exit 0
            fi
          fi
          
          # If it isn't, we first check tomcat process status
          if ! ps --pid $tomcat_pid > /dev/null; then
            echo "[ERROR] Tomcat process no more running, please check." >&2
            exit 3
          fi
          # Then we check Jahia startup status, all
          tail -n +${startup_line} /opt/tomcat/logs/catalina.out | grep -q "Server startup in"
          if [ $? -eq 0 ]; then
            if [ $jahia_running_timeout -eq 0 ]; then
              echo "[ERROR] Tomcat startup is finished but login page is not working, please check." >&2
              exit 4
            fi
            ((jahia_running_timeout-=1))
          fi
          
          sleep 60
        done
        
        echo "[ERROR] Timeout, the Tomcat process is still running but Jahia is not started yet" >&2
        exit 5

  checkJahiaHealth:
    - cmd [${this}]: |-
        if ! rpm --quiet -q jq; then
          echo "[INFO] Installing jq to parse healthcheck module response"
          yum install -y jq
        fi
      user: root
    - cmd [${this}]: |-
        if ! tomcat_pid=$(pgrep -u tomcat -f java); then
          echo "[ERROR] Tomcat process not found, please check" >&2
          exit 1
        fi
        
        hc_url="http://127.0.0.1:8080/modules/healthcheck?token=$jahia_cfg_healthcheck_token"

        if curl_resp=$(curl -f -s -m 1 "$hc_url"); then
          status=$(echo $curl_resp | jq -r ".status")
          if [ "$status" = "GREEN" ] || [ "$status" = "YELLOW" ]; then
            exit 0
          fi
        fi
        echo "[ERROR] Healthcheck result different from GREEN or YELLOW, exiting" && exit 1

  # Make sure that the /opt/tomcat/conf/tomcatenv.sh is persisted when redeploying a cp/proc node
  keepTomcatEnvConfOnRedeploy:
    - log: "## Checking Jelastic redeploy.conf"
    - cmd [${this}]: |-
        if grep -q "tomcat-env.sh" /etc/jelastic/redeploy.conf; then
          exit 0;
        fi
        echo "/opt/tomcat/conf/tomcat-env.sh" >> /etc/jelastic/redeploy.conf
      user: root

  # Make sure that the JCR indices are persisted when redeploying a cp/proc node
  keepJCRIndicesOnRedeploy:
    - log: "## Checking Jelastic redeploy.conf"
    - cmd [${this}]: |-
        if grep -q "/repository/" /etc/jelastic/redeploy.conf; then
          exit 0;
        fi
        echo "/data/digital-factory-data/repository/index" >> /etc/jelastic/redeploy.conf
        echo "/data/digital-factory-data/repository/workspaces" >> /etc/jelastic/redeploy.conf
      user: root
