---
actions:
  onAfterBrowsingScaleOut:
    - setSudoer: ${this.newNode}
    - copyApp: ${this.newNode}
    - setToolsPwd: ${this.newNode}
    - if (settings.mode == 'development'):
        - installMaven: ${this.newNode}
    - setupDatadogAgentPerNode: ${this.newNode}
    - cmd[${this.newNode}]: |-
        if (service tomcat status); then
          echo "Now Restarting Tomcat"
          service tomcat restart
        else
          echo "Now Launching Tomcat"
          service tomcat start
        fi
      user: root

  onAfterRedeployJahiaContainer:
    - cmd[${this}]:
        - service tomcat stop
      user: root
    - setSudoer: ${this}
    - copyApp: ${this}
    - setToolsPwd: ${this}
    - if (settings.mode == 'development'):
        - installMaven: ${this}
    - if ("${this}" == "cp"):
        cmd[${this}]:
          - sed -i "s#\(processingServer\s*=\).*#\1 false#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
    - setupDatadogAgent: ${this}
    - cmd[${this}]: |-
          source /etc/locale.conf
          echo "JAHIA_UPGRADE=$JAHIA_UPGRADE"
          if (service tomcat status && [ "$JAHIA_UPGRADE" == "true" ]); then
            echo "This is an upgrade, processing's tomcat will not be restarted now"
          else
            echo "This is a regular redeploy, restart tomcat now"
            service tomcat start
          fi
      user: root

  stopJahia:
    cmd[${this}]: "service tomcat stop"
    user: root

  initJahiaDatabase:
    - log: "## Import DX schema in database"
    - cmd[${nodes.proc.first.id}]: cat $DATA_PATH/digital-factory-data/db/sql/schema/mysql/*.sql | mysql -h $DB_ENDPOINT -u$DB_USER -p$DB_PASSWORD -f jahia

  installJahia:
    - setSudoer: proc, cp

    - environment.control.ApplyNodeGroupData [proc, cp]:
        data:
          productName: dx
          productVersion: ${globals.dx_version}
          packageType: ${globals.package_type}

    - initJahiaDatabase
    - log: "## Determine JDK version for good _JAVA_OPTIONS envvar"
    - cmd[proc, cp]: |-
        case "$($JAVA_HOME/bin/java -version 2>&1 | awk 'NR==1 {print gensub("(\"|_.*)", "", "g", $3)}')" in
          1.8*)
              j_opts='${globals.java_opts}'
              ;;
          *)
              j_opts='${globals.java_opts} -Xlog:gc::time,uptime,level,pid,tid,tags'
              ;;
        esac
        sed -e '2isource /.jelenv' -e "s/\(^JAVA_OPTS=.*\)\(\"$\)/\1 ${j_opts}\2/" -i /opt/tomcat/conf/tomcat-env.sh

    - copyApp: proc, cp
    - cmd[proc]: |-
        echo "${settings.rootpwd}" > $DATA_PATH/digital-factory-data/root.pwd
      user: tomcat
    - defineToolsPwd
    - setToolsPwd: proc, cp
    - if (settings.mode == 'development'):
        - installMaven: proc, cp

    - if (settings.skipStart != 'true'):
        - api: env.control.ExecDockerRunCmd
          nodeId: ${nodes.proc.first.id}

    - sleep:
        - milliseconds: 120000

    - if (settings.skipStart != 'true'):
        - env.control.ExecDockerRunCmd [${nodes.cp.join(id,)}]

  installMaven:
    - log: "## Activate Maven on ${this}"
    - cmd[${this}]: |-
        mvn_path=$(find /opt/*maven*/bin -type f -name "mvn")
        sed -i 's,#\(mvnPath =\s*\).*$,\1'$mvn_path',' /opt/tomcat/conf/digital-factory-config/jahia/jahia.properties

  copyApp:
    - log: "## Copying DX and settings is properties"
    - cmd[${this}]: |-
        [ "$_ROLE" == "Browsing" ] && sed -i "s#\(processingServer\s*=\).*#\1 false#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
        rm -rf $STACK_PATH/webapps/*
        cp -rf $DATA_PATH/jahia/tomcat/webapps/* $STACK_PATH/webapps
        chown -R tomcat:tomcat $STACK_PATH/webapps
        sed -i "s/operatingMode/#operatingMode/" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties
        sed -i "s#\${HOST_NAME}#$HOSTNAME#g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
        sed -i "2i JMX_OPTS=\-XX:+UseParallelGC" /opt/tomcat/conf/tomcat-env.sh
        sed -i 's/\(^default.config.sync = \)cluster/\1disabled/' /data/digital-factory-data/karaf/etc/org.apache.karaf.cellar.groups.cfg
        sed -i '/<!-- Access log processes all example./i \\t<!-- Remote IP Valve -->\n \t<Valve className="org.apache.catalina.valves.RemoteIpValve" protocolHeader="X-Forwarded-Proto" />\n' /opt/tomcat/conf/server.xml
        sed -i 's/pattern="%h /pattern="%{org.apache.catalina.AccessLog.RemoteAddr}r /' /opt/tomcat/conf/server.xml
        sed -i 's/prefix="localhost_access_log"/prefix="access_log" rotatable="false"/g' /opt/tomcat/conf/server.xml
        #Secure cookies from cross scripting
        indent="      " && printf "$indent<cookie-config>\n$indent$indent<secure>true</secure>\n$indent$indent<http-only>true</http-only>\n$indent</cookie-config>\n" > /tmp/cookies-config
        sed -i '/<session-config>/r /tmp/cookies-config' /opt/tomcat/conf/web.xml && rm /tmp/cookies-config
        sed -e '/maxHttpHeaderSize/d' -e "s/^\(.*Connector port=\"80.*HTTP.*\)$/\1\n\t\tmaxHttpHeaderSize=\"65536\"/g" -i /opt/tomcat/conf/server.xml

  defineToolsPwd:
    - log: "## Now setting tools password"
    - cmd[proc]: |-
        cd /opt/tomcat/webapps/ROOT/WEB-INF/lib/
        /usr/java/latest/bin/jjs -cp $(find . -name jahia-commons-*.jar):$(find . -name jasypt-*.jar) -scripting <<< "print(org.jahia.commons.encryption.EncryptionUtils.pbkdf2Digest(\"${settings.toolspwd}\", \"p\"))" | egrep '^(p|s2):[[:graph:]]+=$'
    - setGlobals:
        toolspwd: ${response.out}
    - api[proc, cp]: env.control.AddContainerEnvVars
      vars: {"MANAGER_PASSWORD": "${globals.toolspwd}"}

  setToolsPwd:
    - cmd[${this}]: |-
         sed -i "s|^jahiaToolManagerPassword .*$|jahiaToolManagerPassword = $MANAGER_PASSWORD|" $STACK_PATH/conf/digital-factory-config/jahia/jahia.properties

  setupDatadogAgent:
    - log: "## Finalize Datadog agent setup on ${this}"
    - cmd [${this}]: |-
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
        chmod 644 /opt/tomcat/logs/catalina.out
        /usr/local/bin/set_dd_tags.sh
        systemctl restart crond
        systemctl enable datadog-agent
      user: root

  setupDatadogAgentPerNode:
    - log: "## Finalize Datadog agent on ${this}"
    - cmd[${this}]: |-
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: ${_ROLE}.${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/tomcat.d/conf.yaml
        chmod 644 /opt/tomcat/logs/catalina.out
        /usr/local/bin/set_dd_tags.sh
        systemctl restart crond
        systemctl enable datadog-agent
      user: root
