---
# DEPENDS ON: ./jahia_actions.yml

actions:
  upgradeJahiaModule:
    # expect the parameter version to be defined
    - if ("${this.module}" == "" || "${this.version}" == ""):
        return:
          type: error
          message: upgradeJahiaModule have to be called with module and version settings
    - setGlobals:
        moduleName: "${this.module}"
        moduleVersion: "${this.version}"
        awkFS: "-F ' ?*\t ?'"
        awkIC: "-v IGNORECASE=1"

    - performModuleUpgradeOnNode: proc
    - foreach (nodes.cp):
        - performModuleUpgradeOnNode: ${@i.id}

  performModuleUpgradeOnNode:
    - enableKarafLogin: ${this}
    - installModuleIfNotPresent: ${this}
    - removeOldModuleVersions: ${this}
    - disableKarafLogin: ${this}

  installModuleIfNotPresent:
    - set:
        modulesUrl: https://store.jahia.com/cms/mavenproxy/private-app-store/org/jahia/modules
    - cmd[${this}]: |-
        ${globals.karafConsole} bundle:list --no-format 2> /dev/null | awk ${globals.awkIC} ${globals.awkFS} \
              'NF==5 && $1>0 && $4=="${globals.moduleVersion}" && $NF~/^${globals.moduleName}$/ \
               {print $1}'
    - if ("${response.out}" == ""):
        - log: Installing new ${globals.moduleName} v${globals.moduleVersion} on ${this}
        - cmd[${this}]: |-
            dashed_name=$(echo "${globals.moduleName}" | awk '{gsub("[[:blank:]]+", "-", $0); print tolower($0)}')
            url="${this.modulesUrl}/${dashed_name}/${globals.moduleVersion}/${dashed_name}-${globals.moduleVersion}.jar"
            if (curl -fIs $url > /dev/null); then
              cd /data/digital-factory-data/modules
              wget -nv -O ${globals.moduleName}-${globals.moduleVersion}.jar $url
            sleep 20
            fi
    - else:
        log: Module ${globals.moduleName} v${globals.moduleVersion} is already on ${this}

    - cmd[${this}]: |-
        # starts the module if not
        bundle_id="$(${globals.karafConsole} bundle:list --no-format 2> /dev/null | awk ${globals.awkIC} ${globals.awkFS} \
                  'NF==5 && $1>0 && $2!="Active" && $4=="${globals.moduleVersion}" && $NF~/^${globals.moduleName}$/ \
                  {print $1}')"
        if [ -n "$bundle_id" ]; then
          i=1
          until (${globals.karafConsole} bundle:start $bundle_id 2> /dev/null) || [ $i -gt $imax ]; do
            sleep 1
            ((i++))
          done
          echo "module started"
        else
          echo "module already started"
        fi
    - if ("${response.out}" == "module started"):
        log: Module ${globals.moduleName} v${globals.moduleVersion} started on ${this}
    - elif ("${response.out}" == "module already started"):
        log: Module ${globals.moduleName} v${globals.moduleVersion} start without intervention on ${this}

  removeOldModuleVersions:
    - cmd[${this}]: |-
        i=1
        imax=66
        id_to_rm="blablabla"
        while [ -n "$id_to_rm" ] || [ $i -gt $imax ]; do
          id_to_rm="$( \
              ${globals.karafConsole} bundle:list --no-format 2> /dev/null | awk ${globals.awkIC} ${globals.awkFS} \
              'NF==5 && $1>0 && $4!="${globals.moduleVersion}" && $NF~/^${globals.moduleName}$/ \
              {printf "%s ",$1}')"
          if [ -n "$id_to_rm" ]; then
            ${globals.karafConsole} bundle:uninstall $id_to_rm 2> /dev/null
          else
            if [ $i -gt 1 ]; then
              echo "removed"
            else
              echo "no other"
            fi
            exit 0
          fi
          ((i++))
        done
        echo "still previous"
    - if ("${response.out}" == "removed"):
        log: Other ${globals.moduleName} module version now deleted on ${this}
    - elif ("${response.out}" == "no other"):
        log: No other ${globals.moduleName} module version on ${this}
    - elif ("${response.out}" == "still previous"):
        log: Other ${globals.moduleName} module version still present on ${this}
