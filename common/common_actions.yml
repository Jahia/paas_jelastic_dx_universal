---

actions:
  setSudoer:
    - log: "## Set sudoer on ${this}"
    - cmd[${this}]: |-
        touch /etc/sudoers.d/sudo
        # Warning : it only works if jelastic user exists, which may be compromised
        # if using a non-Jelastic docker image
        USER=$(id -nu $(id -u jelastic))
        echo "$USER ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
        echo "jelastic ALL=NOPASSWD: ALL" >> /etc/sudoers.d/sudo
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during sudoers configuration."


  removeSudoers:
    - cmd [${this}]:
        - sed -i -e 's/.*NOPASSWD.*//g' /etc/sudoers.d/sudo
      user: root

  setGlobalEnvVars:
    - if (/\/raw\/v[0-9]+(\.[0-9]+)+$/.test(baseUrl)):
        - log: "## git repo branch is prod"
        - api [*]: env.control.AddContainerEnvVars
          vars: {"PACKAGE_TYPE": "prod"}

  setJournaldLimit:
    - cmd[*]: |-
        sed -i 's/.*SystemMaxUse=.*/SystemMaxUse=200M/g' /etc/systemd/journald.conf
        systemctl restart systemd-journald.service
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred while configuring journald."

  getReleaseMajorVersion:
    - script: |-
        var url = "${baseUrl}"
        expr_branch = /.+\/(.+)\/$/
        branch = url.match(expr_branch)[1]
        release_version = branch.split('.')[0].match(/[0-9]+/)

        return {"result": 0, "release_version": release_version}
    - setGlobals:
        envVersion: ${response.release_version}

  checkEnvVersion:
    - script: |-
        const currentVersion = jelastic.env.control.GetNodeGroups("${env.envName}", session).object.filter(function (object) {
            return object.name == "cp";
        }).pop().envVersion;
        if (${this} <= currentVersion) {
            return {'result': 1, 'error': 'Environment is already up-to-date'}
        } else {
            return {'result': 0, 'out': 'Environment needs to be updated'}
        }

  # If the parameter is not an integer, we don't set the env version
  setEnvVersion:
    - if (/^[0-9]+$/.test(${this})):
        - script: |
            return api.env.control.ApplyNodeGroupData("${env.envName}", session, "cp", { envVersion: ${this} });
    - else:
        - log: "The parameter '${this}' is not an integer, nothing to do"

  getLogEventScript:
    cmd[${this}]: |-
      wget -qO /usr/local/bin/log_event.sh ${baseUrl}/scripts/log_events.sh
      chmod u+x /usr/local/bin/log_event.sh
    user: root

  logEvent:
    cmd[${this.target}]: |-
      /usr/local/bin/log_event.sh "${this.title}" "${this.text}"
    user: root
